{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Sandpolis Official Documentation This site explains how to install , configure , and maintain Sandpolis. It also contains the official specification and a high-level programming reference useful to developers. The Basics You are likely already familiar with other remote-control applications that allow you to monitor/manage many different computers from a single pane of glass. To use these tools, you might install an agent on the computers you wish to manage and direct them to connect back to the main application running on your workstation. While relatively simple, there are some evident disadvantages to this approach: Your computer may not have a stable IP address or be reachable over the Internet You may want to quickly perform rudimentary tasks away from your computer such as from a mobile device This architecture does not scale as the number of agents increases Most modern administration systems now use a client-server-agent (CSA) architecture to address these problems. Rather than connecting agents directly to an application on your computer, a central server mediates interactions between you and your systems. Client <==> Server <==> Agent With CSA, clients and agents can come and go without affecting the rest of the network. This means that: background or scheduled tasks can continue after a user logs out; users are not restricted to a particular user interface; users don't have to adjust their firewalls or port-forwarding rules. CSA also comes with a few drawbacks: The server is another application to maintain Although easy to deploy, the Sandpolis server still requires some effort to maintain. In addition to the initial setup, it's important to periodically update the server and harden its security. The server is a high value attack target The server is designed to be as resilient and secure as possible, but it can't be perfect. If an attacker is able to compromise the server (or a user account with sufficiently high privileges), they effectively have full control over all systems connected to it. To help mitigate the risks, all Sandpolis user accounts are required to use two-factor authentication and password rotation. Access alerts can also be configured to help unauthorized accesses get noticed as early as possible. The server can increase network latency Usually the network route between a user and their systems will be faster than the route through the server. This is especially true if a user is on the same lan as their systems. To improve latency and throughput, the server can automatically coordinate a direct connection between any two nodes for high-volume or time-sensitive messages like remote desktop, file transfers, etc. Real-time monitoring Sandpolis offers \"real-time\" monitoring and management when you need it, and efficient scalability when you're not looking. Extensibility via plugins","title":"Home"},{"location":"#sandpolis-official-documentation","text":"This site explains how to install , configure , and maintain Sandpolis. It also contains the official specification and a high-level programming reference useful to developers.","title":"Sandpolis Official Documentation"},{"location":"#the-basics","text":"You are likely already familiar with other remote-control applications that allow you to monitor/manage many different computers from a single pane of glass. To use these tools, you might install an agent on the computers you wish to manage and direct them to connect back to the main application running on your workstation. While relatively simple, there are some evident disadvantages to this approach: Your computer may not have a stable IP address or be reachable over the Internet You may want to quickly perform rudimentary tasks away from your computer such as from a mobile device This architecture does not scale as the number of agents increases Most modern administration systems now use a client-server-agent (CSA) architecture to address these problems. Rather than connecting agents directly to an application on your computer, a central server mediates interactions between you and your systems.","title":"The Basics"},{"location":"#client-server-agent","text":"With CSA, clients and agents can come and go without affecting the rest of the network. This means that: background or scheduled tasks can continue after a user logs out; users are not restricted to a particular user interface; users don't have to adjust their firewalls or port-forwarding rules. CSA also comes with a few drawbacks:","title":"Client &lt;==&gt; Server &lt;==&gt; Agent"},{"location":"#the-server-is-another-application-to-maintain","text":"Although easy to deploy, the Sandpolis server still requires some effort to maintain. In addition to the initial setup, it's important to periodically update the server and harden its security.","title":"The server is another application to maintain"},{"location":"#the-server-is-a-high-value-attack-target","text":"The server is designed to be as resilient and secure as possible, but it can't be perfect. If an attacker is able to compromise the server (or a user account with sufficiently high privileges), they effectively have full control over all systems connected to it. To help mitigate the risks, all Sandpolis user accounts are required to use two-factor authentication and password rotation. Access alerts can also be configured to help unauthorized accesses get noticed as early as possible.","title":"The server is a high value attack target"},{"location":"#the-server-can-increase-network-latency","text":"Usually the network route between a user and their systems will be faster than the route through the server. This is especially true if a user is on the same lan as their systems. To improve latency and throughput, the server can automatically coordinate a direct connection between any two nodes for high-volume or time-sensitive messages like remote desktop, file transfers, etc.","title":"The server can increase network latency"},{"location":"#real-time-monitoring","text":"Sandpolis offers \"real-time\" monitoring and management when you need it, and efficient scalability when you're not looking.","title":"Real-time monitoring"},{"location":"#extensibility-via-plugins","text":"","title":"Extensibility via plugins"},{"location":"specification/com.sandpolis.agent.boot/","text":"Boot Agent","title":"Boot Agent"},{"location":"specification/com.sandpolis.agent.boot/#boot-agent","text":"","title":"Boot Agent"},{"location":"specification/com.sandpolis.agent.kilo/","text":"Standard Agent This JVM-based agent implementation has the most features and is consequently the most resource intensive. It's suitable when running on modern hardware where memory/storage is abundant. Installation Types There are three ways to install the agent, each with advantages and disadvantages. Package Manager Installation This option makes installation itself easy, but requires some effort to configure the agent to connect to a server. This installation type also means that upgrades must only occur through the package manager. Filesystem Layout Pacman (Arch Linux) Path Description /usr/lib/systemd/system/sandpolis-agent.service Systemd service definition /usr/bin/sandpolis-agent-config Configuration executable /usr/bin/sandpolis-agent Main executable /usr/share/java/sandpolis-agent/lib LIB location /usr/share/java/sandpolis-agent/plugin PLUGIN location /var/lib/sandpolis-agent/data DATA location Apk (Alpine) Deployer Installation This option requires no explicit configuration, but the deployer executable must be transferred to the host and invoked explicitly. Filesystem Layout Deployers install everything under a single base directory and create symbolic links in certain locations outside of the base directory. Platform Default base directory path Linux /opt/sandpolis-agent Windows macOS Docker Installation This option is easy to deploy and configure, but can limit the functionality of the agent in some cases. Certain elements of the host filesystem may be optionally mounted into the container.","title":"Standard Agent"},{"location":"specification/com.sandpolis.agent.kilo/#standard-agent","text":"This JVM-based agent implementation has the most features and is consequently the most resource intensive. It's suitable when running on modern hardware where memory/storage is abundant.","title":"Standard Agent"},{"location":"specification/com.sandpolis.agent.kilo/#installation-types","text":"There are three ways to install the agent, each with advantages and disadvantages.","title":"Installation Types"},{"location":"specification/com.sandpolis.agent.kilo/#package-manager-installation","text":"This option makes installation itself easy, but requires some effort to configure the agent to connect to a server. This installation type also means that upgrades must only occur through the package manager.","title":"Package Manager Installation"},{"location":"specification/com.sandpolis.agent.kilo/#filesystem-layout","text":"","title":"Filesystem Layout"},{"location":"specification/com.sandpolis.agent.kilo/#pacman-arch-linux","text":"Path Description /usr/lib/systemd/system/sandpolis-agent.service Systemd service definition /usr/bin/sandpolis-agent-config Configuration executable /usr/bin/sandpolis-agent Main executable /usr/share/java/sandpolis-agent/lib LIB location /usr/share/java/sandpolis-agent/plugin PLUGIN location /var/lib/sandpolis-agent/data DATA location","title":"Pacman (Arch Linux)"},{"location":"specification/com.sandpolis.agent.kilo/#apk-alpine","text":"","title":"Apk (Alpine)"},{"location":"specification/com.sandpolis.agent.kilo/#deployer-installation","text":"This option requires no explicit configuration, but the deployer executable must be transferred to the host and invoked explicitly.","title":"Deployer Installation"},{"location":"specification/com.sandpolis.agent.kilo/#filesystem-layout_1","text":"Deployers install everything under a single base directory and create symbolic links in certain locations outside of the base directory. Platform Default base directory path Linux /opt/sandpolis-agent Windows macOS","title":"Filesystem Layout"},{"location":"specification/com.sandpolis.agent.kilo/#docker-installation","text":"This option is easy to deploy and configure, but can limit the functionality of the agent in some cases. Certain elements of the host filesystem may be optionally mounted into the container.","title":"Docker Installation"},{"location":"specification/com.sandpolis.agent.micro/","text":"Native Agent This agent implementation is designed for performance critical deployments. It has fewer features than the standard agent, but requires significantly less resources. Release artifacts Identifier Type agent-linux-amd64 ELF agent-linux-i686 ELF agent-linux-aarch64 ELF agent-linux-armv7 ELF agent-windows-amd64 PE agent-windows-i686 PE agent-macos-amd64 Mach-O agent-macos-aarch64 Mach-O bootagent-linux-amd64 ELF bootagent-linux-i686 ELF bootagent-linux-aarch64 ELF","title":"Native Agent"},{"location":"specification/com.sandpolis.agent.micro/#native-agent","text":"This agent implementation is designed for performance critical deployments. It has fewer features than the standard agent, but requires significantly less resources.","title":"Native Agent"},{"location":"specification/com.sandpolis.agent.micro/#release-artifacts","text":"Identifier Type agent-linux-amd64 ELF agent-linux-i686 ELF agent-linux-aarch64 ELF agent-linux-armv7 ELF agent-windows-amd64 PE agent-windows-i686 PE agent-macos-amd64 Mach-O agent-macos-aarch64 Mach-O bootagent-linux-amd64 ELF bootagent-linux-i686 ELF bootagent-linux-aarch64 ELF","title":"Release artifacts"},{"location":"specification/com.sandpolis.client.brightstone/","text":"Web Client","title":"Web Client"},{"location":"specification/com.sandpolis.client.brightstone/#web-client","text":"","title":"Web Client"},{"location":"specification/com.sandpolis.client.lifegem/","text":"Desktop Client The desktop client is based on the JVM. Installation Types There are two ways to install the client, each with advantages and disadvantages. Package Manager Installation Filesystem Layout Chocolately (Windows) Path Description C:/ProgramData/Microsoft/Windows/Start Menu/Programs Desktop shortcut Docker Installation This option is easy to deploy, but only works on Linux with X11.","title":"Desktop Client"},{"location":"specification/com.sandpolis.client.lifegem/#desktop-client","text":"The desktop client is based on the JVM.","title":"Desktop Client"},{"location":"specification/com.sandpolis.client.lifegem/#installation-types","text":"There are two ways to install the client, each with advantages and disadvantages.","title":"Installation Types"},{"location":"specification/com.sandpolis.client.lifegem/#package-manager-installation","text":"","title":"Package Manager Installation"},{"location":"specification/com.sandpolis.client.lifegem/#filesystem-layout","text":"","title":"Filesystem Layout"},{"location":"specification/com.sandpolis.client.lifegem/#chocolately-windows","text":"Path Description C:/ProgramData/Microsoft/Windows/Start Menu/Programs Desktop shortcut","title":"Chocolately (Windows)"},{"location":"specification/com.sandpolis.client.lifegem/#docker-installation","text":"This option is easy to deploy, but only works on Linux with X11.","title":"Docker Installation"},{"location":"specification/com.sandpolis.core.agent/","text":"Agent Instance At a general level, agents are responsible for carrying out tasks for remote users. They can connect over the network to any other type of instance. At minimum, agents must be associated with one server. Instance Configuration { \"network\" : { \"servers\" : String(), \"timeout\" : Number(), # The server connection timeout in milliseconds \"strict_certs\" : Boolean(), # The agent will refuse to connect to a server that presents an invalid certificate \"polling_interval\" : Number(), # The connection poll interval in milliseconds } } Connection Modes There are two connection modes that have an impact on performance and latency. Continuous In continuous mode, the agent maintains its primary connection at all times. If the connection is lost, the agent will periodically attempt to reestablish the connection using the same parameters it used to establish the initial connection. The connection mode can be changed on-the-fly by a user or scheduled to change automatically according to the time and day. Polling In polling mode, the agent intentionally closes the primary connection unless there exists an active stream. On a configurable schedule, the agent reconnects to a server, flushes any cached data, and checks for any new work items. After executing all available work items, the primary connection is closed again. The agent may attempt a spontaneous connection outside of the regular schedule if an internal agent process triggers it. Plugins Agents can optionally support plugins to enhance functionality beyond the standard feature set. Upon initial connection, the agent provides a list of plugin versions that it has loaded. The server responds with a list of plugin archives that the agent should install. Standard Feature Set The standard feature set is the minimum amount of functionality an agent implementation must provide. AgentMetadata Upgrades There are two ways to upgrade the agent: automatically by sending the update command to the server, manually by generating a new installer and executing it on the agent Manual Upgrade A manual upgrade is triggered when an installer is executed on the agent and the relevant base directory is already populated with an installation. If the agent is not running, the installer will overwrite the base directory and install itself. Any data that the agent has cached but not sent to the server will be lost! Advantages This is the only way to upgrade if the agent can no longer connect to the server Disadvantages Manual intervention required Cached data may be lost Automated Upgrade If the agent is connected to a server, it can be upgraded remotely. This will cause the server to fetch the agent configuration, generate a new installer, and transfer it to the agent. The agent then executes the new installer and terminates. Container Resident Boot Agent Boot agents are a special subset of agent instances that run in a custom UEFI boot environment rather than on a host's OS. Configuration The boot agent accepts the following specific configuration options. Property Default Description s7s.agent.boot.network.interface A specific network interface to use s7s.agent.boot.network.dhcp true Whether the boot agent will attempt to obtain a DHCP address s7s.agent.boot.network.ip A static IPv4 that will be used instead of DHCP s7s.agent.boot.network.netmask The network mask for the static IPv4 address Boot Environment The boot agent environment occupies an entire partition on the host and contains: A bootloader A Linux kernel efibootmgr executables Boot agent executables All library dependencies Startup The boot environment does not provide a shell and merely executes the boot agent on startup. The boot agent immediately spawns an infinite connection loop for the configured server. Installation Agent instances are capable of installing a boot agent on their host machine if installed with sufficient permissions. downloads a boot agent image to the partition and writes a new configuration according to parameters of the host OS or overrides provided by a client. Once the partition is written, the agent adds it to the end of the existing EFI boot order. Host Media In order to install the boot agent to the existing disk, a new partition of at least 250 MiB must first be created manually. The agent installs an additional bootloader to the existing ESP. Removable Media The agent can erase an existing disk and create a new ESP and boot agent partition. Uninstallation To uninstall, an agent must remove the boot agent's entry in the EFI boot order and overwrite all data in the boot agent partition. Reboot into boot agent Agents can launch the boot agent indirectly by setting the BootNext variable to the index of the boot agent EFI entry and rebooting the machine.","title":"Agent Instance"},{"location":"specification/com.sandpolis.core.agent/#agent-instance","text":"At a general level, agents are responsible for carrying out tasks for remote users. They can connect over the network to any other type of instance. At minimum, agents must be associated with one server.","title":"Agent Instance"},{"location":"specification/com.sandpolis.core.agent/#instance-configuration","text":"{ \"network\" : { \"servers\" : String(), \"timeout\" : Number(), # The server connection timeout in milliseconds \"strict_certs\" : Boolean(), # The agent will refuse to connect to a server that presents an invalid certificate \"polling_interval\" : Number(), # The connection poll interval in milliseconds } }","title":"Instance Configuration"},{"location":"specification/com.sandpolis.core.agent/#connection-modes","text":"There are two connection modes that have an impact on performance and latency.","title":"Connection Modes"},{"location":"specification/com.sandpolis.core.agent/#continuous","text":"In continuous mode, the agent maintains its primary connection at all times. If the connection is lost, the agent will periodically attempt to reestablish the connection using the same parameters it used to establish the initial connection. The connection mode can be changed on-the-fly by a user or scheduled to change automatically according to the time and day.","title":"Continuous"},{"location":"specification/com.sandpolis.core.agent/#polling","text":"In polling mode, the agent intentionally closes the primary connection unless there exists an active stream. On a configurable schedule, the agent reconnects to a server, flushes any cached data, and checks for any new work items. After executing all available work items, the primary connection is closed again. The agent may attempt a spontaneous connection outside of the regular schedule if an internal agent process triggers it.","title":"Polling"},{"location":"specification/com.sandpolis.core.agent/#plugins","text":"Agents can optionally support plugins to enhance functionality beyond the standard feature set. Upon initial connection, the agent provides a list of plugin versions that it has loaded. The server responds with a list of plugin archives that the agent should install.","title":"Plugins"},{"location":"specification/com.sandpolis.core.agent/#standard-feature-set","text":"The standard feature set is the minimum amount of functionality an agent implementation must provide.","title":"Standard Feature Set"},{"location":"specification/com.sandpolis.core.agent/#agentmetadata","text":"","title":"AgentMetadata"},{"location":"specification/com.sandpolis.core.agent/#upgrades","text":"There are two ways to upgrade the agent: automatically by sending the update command to the server, manually by generating a new installer and executing it on the agent","title":"Upgrades"},{"location":"specification/com.sandpolis.core.agent/#manual-upgrade","text":"A manual upgrade is triggered when an installer is executed on the agent and the relevant base directory is already populated with an installation. If the agent is not running, the installer will overwrite the base directory and install itself. Any data that the agent has cached but not sent to the server will be lost! Advantages This is the only way to upgrade if the agent can no longer connect to the server Disadvantages Manual intervention required Cached data may be lost","title":"Manual Upgrade"},{"location":"specification/com.sandpolis.core.agent/#automated-upgrade","text":"If the agent is connected to a server, it can be upgraded remotely. This will cause the server to fetch the agent configuration, generate a new installer, and transfer it to the agent. The agent then executes the new installer and terminates.","title":"Automated Upgrade"},{"location":"specification/com.sandpolis.core.agent/#container-resident","text":"","title":"Container Resident"},{"location":"specification/com.sandpolis.core.agent/#boot-agent","text":"Boot agents are a special subset of agent instances that run in a custom UEFI boot environment rather than on a host's OS.","title":"Boot Agent"},{"location":"specification/com.sandpolis.core.agent/#configuration","text":"The boot agent accepts the following specific configuration options. Property Default Description s7s.agent.boot.network.interface A specific network interface to use s7s.agent.boot.network.dhcp true Whether the boot agent will attempt to obtain a DHCP address s7s.agent.boot.network.ip A static IPv4 that will be used instead of DHCP s7s.agent.boot.network.netmask The network mask for the static IPv4 address","title":"Configuration"},{"location":"specification/com.sandpolis.core.agent/#boot-environment","text":"The boot agent environment occupies an entire partition on the host and contains: A bootloader A Linux kernel efibootmgr executables Boot agent executables All library dependencies","title":"Boot Environment"},{"location":"specification/com.sandpolis.core.agent/#startup","text":"The boot environment does not provide a shell and merely executes the boot agent on startup. The boot agent immediately spawns an infinite connection loop for the configured server.","title":"Startup"},{"location":"specification/com.sandpolis.core.agent/#installation","text":"Agent instances are capable of installing a boot agent on their host machine if installed with sufficient permissions. downloads a boot agent image to the partition and writes a new configuration according to parameters of the host OS or overrides provided by a client. Once the partition is written, the agent adds it to the end of the existing EFI boot order.","title":"Installation"},{"location":"specification/com.sandpolis.core.agent/#host-media","text":"In order to install the boot agent to the existing disk, a new partition of at least 250 MiB must first be created manually. The agent installs an additional bootloader to the existing ESP.","title":"Host Media"},{"location":"specification/com.sandpolis.core.agent/#removable-media","text":"The agent can erase an existing disk and create a new ESP and boot agent partition.","title":"Removable Media"},{"location":"specification/com.sandpolis.core.agent/#uninstallation","text":"To uninstall, an agent must remove the boot agent's entry in the EFI boot order and overwrite all data in the boot agent partition.","title":"Uninstallation"},{"location":"specification/com.sandpolis.core.agent/#reboot-into-boot-agent","text":"Agents can launch the boot agent indirectly by setting the BootNext variable to the index of the boot agent EFI entry and rebooting the machine.","title":"Reboot into boot agent"},{"location":"specification/com.sandpolis.core.client/","text":"Client Instance Client instances are applications that the end-user directly uses to perform tasks in a Sandpolis network. There are several different implementations with varying feature sets to accommodate a wide range of use-cases. com.sandpolis.core.client.json { }","title":"Com.sandpolis.core.client"},{"location":"specification/com.sandpolis.core.client/#client-instance","text":"Client instances are applications that the end-user directly uses to perform tasks in a Sandpolis network. There are several different implementations with varying feature sets to accommodate a wide range of use-cases.","title":"Client Instance"},{"location":"specification/com.sandpolis.core.client/#comsandpoliscoreclientjson","text":"{ }","title":"com.sandpolis.core.client.json"},{"location":"specification/com.sandpolis.core.clientserver/","text":"Client/Server Messages Message Sources Destinations Description RQ_ServerBanner client server Request the server's banner RS_ServerBanner server client Response containing the server's banner RQ_Logout client server Request that the current login session be terminated RS_Logout server client RQ_Login client server Request a new login session Message Formats RS_ServerBanner Field Type Requirements Description maintenance bool Indicates that only superusers will be allowed to login version string 5 - 32 characters The server's version string message string 0 - 128 characters The banner text message image bytes 0 - 1 MiB PNG format The banner image RS_Logout Field Description LOGOUT_OK Indicates the logout attempt was successful RQ_Login Field Type Requirements Description username string 5 - 32 characters The username password string 5 - 32 characters An unsalted SHA512 hash of the password token int32 A TOTP token RS_Login Field Description LOGIN_OK Indicates the login attempt succeeded LOGIN_INVALID_USERNAME Indicates the supplied username RQ_CreateUser Field Type Requirements Description username string password string email string phone string expiration int64 RS_CreateUser Field Description CREATE_USER_OK CREATE_USER_ACCESS_DENIED CREATE_USER_INVALID_USERNAME CREATE_USER_INVALID_PASSWORD CREATE_USER_INVALID_EMAIL CREATE_USER_INVALID_PHONE RQ_DeleteUser Field Type Requirements Description username string RS_DeleteUser Field Description DELETE_USER_OK DELETE_USER_ACCESS_DENIED RQ_DeleteGroup Field Type Requirements Description name string RS_DeleteGroup Field Description DELETE_GROUP_OK DELETE_GROUP_ACCESS_DENIED RQ_DeleteListener Field Type Requirements Description name string RS_DeleteListener Field Description DELETE_LISTENER_OK DELETE_LISTENER_ACCESS_DENIED","title":"Client/Server Messages"},{"location":"specification/com.sandpolis.core.clientserver/#clientserver-messages","text":"Message Sources Destinations Description RQ_ServerBanner client server Request the server's banner RS_ServerBanner server client Response containing the server's banner RQ_Logout client server Request that the current login session be terminated RS_Logout server client RQ_Login client server Request a new login session","title":"Client/Server Messages"},{"location":"specification/com.sandpolis.core.clientserver/#message-formats","text":"","title":"Message Formats"},{"location":"specification/com.sandpolis.core.clientserver/#rs_serverbanner","text":"Field Type Requirements Description maintenance bool Indicates that only superusers will be allowed to login version string 5 - 32 characters The server's version string message string 0 - 128 characters The banner text message image bytes 0 - 1 MiB PNG format The banner image","title":"RS_ServerBanner"},{"location":"specification/com.sandpolis.core.clientserver/#rs_logout","text":"Field Description LOGOUT_OK Indicates the logout attempt was successful","title":"RS_Logout"},{"location":"specification/com.sandpolis.core.clientserver/#rq_login","text":"Field Type Requirements Description username string 5 - 32 characters The username password string 5 - 32 characters An unsalted SHA512 hash of the password token int32 A TOTP token","title":"RQ_Login"},{"location":"specification/com.sandpolis.core.clientserver/#rs_login","text":"Field Description LOGIN_OK Indicates the login attempt succeeded LOGIN_INVALID_USERNAME Indicates the supplied username","title":"RS_Login"},{"location":"specification/com.sandpolis.core.clientserver/#rq_createuser","text":"Field Type Requirements Description username string password string email string phone string expiration int64","title":"RQ_CreateUser"},{"location":"specification/com.sandpolis.core.clientserver/#rs_createuser","text":"Field Description CREATE_USER_OK CREATE_USER_ACCESS_DENIED CREATE_USER_INVALID_USERNAME CREATE_USER_INVALID_PASSWORD CREATE_USER_INVALID_EMAIL CREATE_USER_INVALID_PHONE","title":"RS_CreateUser"},{"location":"specification/com.sandpolis.core.clientserver/#rq_deleteuser","text":"Field Type Requirements Description username string","title":"RQ_DeleteUser"},{"location":"specification/com.sandpolis.core.clientserver/#rs_deleteuser","text":"Field Description DELETE_USER_OK DELETE_USER_ACCESS_DENIED","title":"RS_DeleteUser"},{"location":"specification/com.sandpolis.core.clientserver/#rq_deletegroup","text":"Field Type Requirements Description name string","title":"RQ_DeleteGroup"},{"location":"specification/com.sandpolis.core.clientserver/#rs_deletegroup","text":"Field Description DELETE_GROUP_OK DELETE_GROUP_ACCESS_DENIED","title":"RS_DeleteGroup"},{"location":"specification/com.sandpolis.core.clientserver/#rq_deletelistener","text":"Field Type Requirements Description name string","title":"RQ_DeleteListener"},{"location":"specification/com.sandpolis.core.clientserver/#rs_deletelistener","text":"Field Description DELETE_LISTENER_OK DELETE_LISTENER_ACCESS_DENIED","title":"RS_DeleteListener"},{"location":"specification/com.sandpolis.core.deployer/","text":"Deployer Deployer instances are responsible for installing, updating, or removing agent and probe instances. If an existing agent or probe was originally installed by a package manager, it cannot be updated or removed by a deployer. Instance Configuration { \"agent_type\" : String(), # The type of agent to install \"callback\" : { \"address\" : String(), # The callback address \"identifier\" : String(), # The callback identifier }, \"install_dir\" : String(), # The installation's base directory \"autorecover\" : String(), # Whether the agent can disregard elements of the config in case of failure \"autostart\" : Boolean(), # Whether the agent should be started on boot \"kilo\" : { \"modules\" : [ { \"group\" : String(), # The artifact's maven group identifier \"artifact\" : String(), # The artifact's identifier \"filename\" : String(), # The artifact's filename \"version\" : String(), # The artifact's version string \"hash\" : String(), # The artifact's SHA256 hash } ] } } Callbacks Connections If the install/update operation fails, and callbacks are configured, the deployer will establish an encrypted \"callback\" connection with a server and transfer details on the error.","title":"Deployer"},{"location":"specification/com.sandpolis.core.deployer/#deployer","text":"Deployer instances are responsible for installing, updating, or removing agent and probe instances. If an existing agent or probe was originally installed by a package manager, it cannot be updated or removed by a deployer.","title":"Deployer"},{"location":"specification/com.sandpolis.core.deployer/#instance-configuration","text":"{ \"agent_type\" : String(), # The type of agent to install \"callback\" : { \"address\" : String(), # The callback address \"identifier\" : String(), # The callback identifier }, \"install_dir\" : String(), # The installation's base directory \"autorecover\" : String(), # Whether the agent can disregard elements of the config in case of failure \"autostart\" : Boolean(), # Whether the agent should be started on boot \"kilo\" : { \"modules\" : [ { \"group\" : String(), # The artifact's maven group identifier \"artifact\" : String(), # The artifact's identifier \"filename\" : String(), # The artifact's filename \"version\" : String(), # The artifact's version string \"hash\" : String(), # The artifact's SHA256 hash } ] } }","title":"Instance Configuration"},{"location":"specification/com.sandpolis.core.deployer/#callbacks-connections","text":"If the install/update operation fails, and callbacks are configured, the deployer will establish an encrypted \"callback\" connection with a server and transfer details on the error.","title":"Callbacks Connections"},{"location":"specification/com.sandpolis.core.instance/","text":"Instance The following sections apply to all Sandpolis instances. Instance Types Every instance belongs to one of five mutually exclusive instance types . There is often more than one implementation in each category. Instance Type Description server A headless application that coordinates interactions among instances in the network agent A headless application that runs continuously on hosts in the Sandpolis network probe A headless application that provides strictly read-only data to servers client A UI application used for managing agents and probes deployer A headless application that installs or updates agents and probes Instance Flavors (subtypes) Each instance type may have multiple implementations (or flavors) to support a variety of use cases. Flavors are identified by a codename and also have a user-friendly \"official\" name. Type Flavor codename Implementation languages Official name server vanilla Java Server client lifegem Java, Kotlin Desktop Client client ascetic Java Terminal Client client lockstone Swift iOS Client client brightstone JavaScript Web Client agent kilo Java Agent agent micro Rust Native Agent agent boot Rust Boot Agent probe nano C++ Probe deployer rust Rust Agent deployer (Rust) deployer java Java Agent deployer (Java) Instance Configuration { \"runtime\" : { \"residency\": Boolean(default=False), # Whether the instance is running in a container } } Build Metadata { \"build_platform\" : String(), # The build platform \"build_timestamp\" : Number(), # The build timestamp \"instance_version\" : String(), # The instance's version \"gradle_version\" : String(), # The Gradle version \"java_version\" : String(), # The Java version \"kotlin_version\" : String(), # The kotlin version is applicable \"rust_version\" : String(), # The rust version if applicable \"dependencies\" : [ String(), # The artifact coordinates in G:A:V format ] } Data Model There are three layers in the Sandpolis data model. Of which, client implementations are required to support at least two (ST and OID layers). The ST Layer The State Tree layer is the lowest layer and is concerned with storage and persistence. Every instance maintains a global tree called the \"ST Tree\". The tree is seldomly manipulated directly. Instead, higher layers make changes to the ST Tree on behalf of consumers. The ST tree is composed of two components: Attribute s and Document s. Attributes Attributes contain data of a specific type and meaning. All data in the ST tree is stored in attributes. Retention The history of an attribute can optionally be recorded with tracked attributes . AttributeChangedEvent Documents Documents are a set of attributes and sub-documents. DocumentAddedEvent Indicates that a document has been added to the tree. No futher events will be fired for all children of the added document as a direct result of the addition. DocumentRemovedEvent Indicates that a document has been removed from the tree. Entanglement A concept that exists at the ST layer is entanglement : ST trees that reside on remote instances can synchronize their state. The relation can be bidirectional or unidirectional and last as long as necessary. All changes to the source of an entanglement pair will be propagated to the destination in real-time. Snapshots and Merging The VST Layer The OID Layer Every node in a ST Tree is uniquely identified by an OID. Path The OID path is a sequence of / separated strings that describe how to reach the corresponding node from the root node. Elements of the path are called components which may consist of any number of alphanumeric characters and underscores. If a component equals the wildcard character ( * ), then the OID corresponds to all possible values of that component and is known as a generic OID. If an OID is not generic, then it's concrete . Namespace OIDs have a namespace string that identifies the module that provides the OID. This allows modules to define OIDs without the possibility of collisions. The namespace string must equal the name of the module that defines an OID. Namespace notation is to prefix the namespace string and a : , similar to the protocol section of a URI: com.sandpolis.plugin.example:/profile/*/example Temporal Selector In order to select historic values of an attribute, concrete OIDs may include a timestamp range selector or an index selector. Timestamp Selector To select all values within an arbitrary timestamp range, specify the inclusive start and end epoch timestamps separated by a .. in parenthesis. If either timestamp is omitted, then the range is extended to the most extreme value possible. /profile/ba4412ea-1ec6-4e76-be78-3849d2196b52/example(1628216870..1628216880) Index Selector To select an arbitrary amount of values, specify inclusive start and end indicies separated by a .. in square brackets. If either index is omitted, then the range is extended to the most extreme value possible. Index 0 is the oldest value. /profile/ba4412ea-1ec6-4e76-be78-3849d2196b52/example[2..7] To select one value, omit the range specifier entirely: /profile/ba4412ea-1ec6-4e76-be78-3849d2196b52/example[1] Message Format The Sandpolis network protocol is based on protocol buffers . Request/Response messages Request messages are named with a RQ_ prefix. Event messages Event messages are named with a EV_ prefix and are typically part of a stream.","title":"Instance"},{"location":"specification/com.sandpolis.core.instance/#instance","text":"The following sections apply to all Sandpolis instances.","title":"Instance"},{"location":"specification/com.sandpolis.core.instance/#instance-types","text":"Every instance belongs to one of five mutually exclusive instance types . There is often more than one implementation in each category. Instance Type Description server A headless application that coordinates interactions among instances in the network agent A headless application that runs continuously on hosts in the Sandpolis network probe A headless application that provides strictly read-only data to servers client A UI application used for managing agents and probes deployer A headless application that installs or updates agents and probes","title":"Instance Types"},{"location":"specification/com.sandpolis.core.instance/#instance-flavors-subtypes","text":"Each instance type may have multiple implementations (or flavors) to support a variety of use cases. Flavors are identified by a codename and also have a user-friendly \"official\" name. Type Flavor codename Implementation languages Official name server vanilla Java Server client lifegem Java, Kotlin Desktop Client client ascetic Java Terminal Client client lockstone Swift iOS Client client brightstone JavaScript Web Client agent kilo Java Agent agent micro Rust Native Agent agent boot Rust Boot Agent probe nano C++ Probe deployer rust Rust Agent deployer (Rust) deployer java Java Agent deployer (Java)","title":"Instance Flavors (subtypes)"},{"location":"specification/com.sandpolis.core.instance/#instance-configuration","text":"{ \"runtime\" : { \"residency\": Boolean(default=False), # Whether the instance is running in a container } }","title":"Instance Configuration"},{"location":"specification/com.sandpolis.core.instance/#build-metadata","text":"{ \"build_platform\" : String(), # The build platform \"build_timestamp\" : Number(), # The build timestamp \"instance_version\" : String(), # The instance's version \"gradle_version\" : String(), # The Gradle version \"java_version\" : String(), # The Java version \"kotlin_version\" : String(), # The kotlin version is applicable \"rust_version\" : String(), # The rust version if applicable \"dependencies\" : [ String(), # The artifact coordinates in G:A:V format ] }","title":"Build Metadata"},{"location":"specification/com.sandpolis.core.instance/#data-model","text":"There are three layers in the Sandpolis data model. Of which, client implementations are required to support at least two (ST and OID layers).","title":"Data Model"},{"location":"specification/com.sandpolis.core.instance/#the-st-layer","text":"The State Tree layer is the lowest layer and is concerned with storage and persistence. Every instance maintains a global tree called the \"ST Tree\". The tree is seldomly manipulated directly. Instead, higher layers make changes to the ST Tree on behalf of consumers. The ST tree is composed of two components: Attribute s and Document s.","title":"The ST Layer"},{"location":"specification/com.sandpolis.core.instance/#attributes","text":"Attributes contain data of a specific type and meaning. All data in the ST tree is stored in attributes.","title":"Attributes"},{"location":"specification/com.sandpolis.core.instance/#retention","text":"The history of an attribute can optionally be recorded with tracked attributes .","title":"Retention"},{"location":"specification/com.sandpolis.core.instance/#attributechangedevent","text":"","title":"AttributeChangedEvent"},{"location":"specification/com.sandpolis.core.instance/#documents","text":"Documents are a set of attributes and sub-documents.","title":"Documents"},{"location":"specification/com.sandpolis.core.instance/#documentaddedevent","text":"Indicates that a document has been added to the tree. No futher events will be fired for all children of the added document as a direct result of the addition.","title":"DocumentAddedEvent"},{"location":"specification/com.sandpolis.core.instance/#documentremovedevent","text":"Indicates that a document has been removed from the tree.","title":"DocumentRemovedEvent"},{"location":"specification/com.sandpolis.core.instance/#entanglement","text":"A concept that exists at the ST layer is entanglement : ST trees that reside on remote instances can synchronize their state. The relation can be bidirectional or unidirectional and last as long as necessary. All changes to the source of an entanglement pair will be propagated to the destination in real-time.","title":"Entanglement"},{"location":"specification/com.sandpolis.core.instance/#snapshots-and-merging","text":"","title":"Snapshots and Merging"},{"location":"specification/com.sandpolis.core.instance/#the-vst-layer","text":"","title":"The VST Layer"},{"location":"specification/com.sandpolis.core.instance/#the-oid-layer","text":"Every node in a ST Tree is uniquely identified by an OID.","title":"The OID Layer"},{"location":"specification/com.sandpolis.core.instance/#path","text":"The OID path is a sequence of / separated strings that describe how to reach the corresponding node from the root node. Elements of the path are called components which may consist of any number of alphanumeric characters and underscores. If a component equals the wildcard character ( * ), then the OID corresponds to all possible values of that component and is known as a generic OID. If an OID is not generic, then it's concrete .","title":"Path"},{"location":"specification/com.sandpolis.core.instance/#namespace","text":"OIDs have a namespace string that identifies the module that provides the OID. This allows modules to define OIDs without the possibility of collisions. The namespace string must equal the name of the module that defines an OID. Namespace notation is to prefix the namespace string and a : , similar to the protocol section of a URI: com.sandpolis.plugin.example:/profile/*/example","title":"Namespace"},{"location":"specification/com.sandpolis.core.instance/#temporal-selector","text":"In order to select historic values of an attribute, concrete OIDs may include a timestamp range selector or an index selector.","title":"Temporal Selector"},{"location":"specification/com.sandpolis.core.instance/#timestamp-selector","text":"To select all values within an arbitrary timestamp range, specify the inclusive start and end epoch timestamps separated by a .. in parenthesis. If either timestamp is omitted, then the range is extended to the most extreme value possible. /profile/ba4412ea-1ec6-4e76-be78-3849d2196b52/example(1628216870..1628216880)","title":"Timestamp Selector"},{"location":"specification/com.sandpolis.core.instance/#index-selector","text":"To select an arbitrary amount of values, specify inclusive start and end indicies separated by a .. in square brackets. If either index is omitted, then the range is extended to the most extreme value possible. Index 0 is the oldest value. /profile/ba4412ea-1ec6-4e76-be78-3849d2196b52/example[2..7] To select one value, omit the range specifier entirely: /profile/ba4412ea-1ec6-4e76-be78-3849d2196b52/example[1]","title":"Index Selector"},{"location":"specification/com.sandpolis.core.instance/#message-format","text":"The Sandpolis network protocol is based on protocol buffers .","title":"Message Format"},{"location":"specification/com.sandpolis.core.instance/#requestresponse-messages","text":"Request messages are named with a RQ_ prefix.","title":"Request/Response messages"},{"location":"specification/com.sandpolis.core.instance/#event-messages","text":"Event messages are named with a EV_ prefix and are typically part of a stream.","title":"Event messages"},{"location":"specification/com.sandpolis.core.net/","text":"Networking Module Sandpolis Protocol Sandpolis uses a custom binary protocol based on protocol buffers for all inter-instance network communications. By default, the server listens on TCP port 8768 . Most communication happens over TCP connections among instances and the server, but the server can also coordinate direct TCP or UDP \"sessions\" between any two instances that need to transfer high-volume or low-latency data. Streams Many operations require real-time data for a short-lived or long-lived session. All streams have a source and a sink and can exist between any two instances (a stream where the source and sink reside on the same instance is called a local stream ). The source's purpose is to produce stream events at whatever frequency is appropriate for the use-case and the sink's purpose is to consume those stream events. Multicasting Stream sources can push events to more than one sink simultaneously. This is called multicasting and can save bandwidth in situations where multiple users request the same resource at the same time. Messages Message Sources Destinations Description RQ_Session client , agent server RS_Session server client , agent RQ_AddConnection client server RQ_CoordinateConnection server client , agent EV_NetworkChanged server client , agent Indicates that some node in the network has changed in connection status RQ_InstallPlugin client server Request that a new plugin be installed RQ_STStream client , agent server Request a new state tree sync stream EV_STStreamData server RQ_CloseStream Request that a stream be closed Session Clients and agents maintain an ephemeral session which consists of a session identifier and authentication state. Session identifiers are 4-byte unsigned integers that have the instance type and instance flavor encoded in them. 0 1 2 3 012345678901234567890123 45678 901 [ Base CVID | FID |IID] RQ_CoordinateConnection Request that the receiving instance establish a new connection to the given host. The receiver should attempt the connection as soon as possible. Field Type Requirements Description host string An IP address The connection host port int32 A valid port number The connection port protocol string tcp or udp The connection protocol encryption_key bytes 64 bytes The initial encryption key for the new connection RQ_STStream Field Type Requirements Description stream_id int32 oid string whitelist repeated string direction string \"upstream\", \"downstream\", or \"bidirectional\"","title":"Networking Module"},{"location":"specification/com.sandpolis.core.net/#networking-module","text":"","title":"Networking Module"},{"location":"specification/com.sandpolis.core.net/#sandpolis-protocol","text":"Sandpolis uses a custom binary protocol based on protocol buffers for all inter-instance network communications. By default, the server listens on TCP port 8768 . Most communication happens over TCP connections among instances and the server, but the server can also coordinate direct TCP or UDP \"sessions\" between any two instances that need to transfer high-volume or low-latency data.","title":"Sandpolis Protocol"},{"location":"specification/com.sandpolis.core.net/#streams","text":"Many operations require real-time data for a short-lived or long-lived session. All streams have a source and a sink and can exist between any two instances (a stream where the source and sink reside on the same instance is called a local stream ). The source's purpose is to produce stream events at whatever frequency is appropriate for the use-case and the sink's purpose is to consume those stream events.","title":"Streams"},{"location":"specification/com.sandpolis.core.net/#multicasting","text":"Stream sources can push events to more than one sink simultaneously. This is called multicasting and can save bandwidth in situations where multiple users request the same resource at the same time.","title":"Multicasting"},{"location":"specification/com.sandpolis.core.net/#messages","text":"Message Sources Destinations Description RQ_Session client , agent server RS_Session server client , agent RQ_AddConnection client server RQ_CoordinateConnection server client , agent EV_NetworkChanged server client , agent Indicates that some node in the network has changed in connection status RQ_InstallPlugin client server Request that a new plugin be installed RQ_STStream client , agent server Request a new state tree sync stream EV_STStreamData server RQ_CloseStream Request that a stream be closed","title":"Messages"},{"location":"specification/com.sandpolis.core.net/#session","text":"Clients and agents maintain an ephemeral session which consists of a session identifier and authentication state. Session identifiers are 4-byte unsigned integers that have the instance type and instance flavor encoded in them. 0 1 2 3 012345678901234567890123 45678 901 [ Base CVID | FID |IID]","title":"Session"},{"location":"specification/com.sandpolis.core.net/#rq_coordinateconnection","text":"Request that the receiving instance establish a new connection to the given host. The receiver should attempt the connection as soon as possible. Field Type Requirements Description host string An IP address The connection host port int32 A valid port number The connection port protocol string tcp or udp The connection protocol encryption_key bytes 64 bytes The initial encryption key for the new connection","title":"RQ_CoordinateConnection"},{"location":"specification/com.sandpolis.core.net/#rq_ststream","text":"Field Type Requirements Description stream_id int32 oid string whitelist repeated string direction string \"upstream\", \"downstream\", or \"bidirectional\"","title":"RQ_STStream"},{"location":"specification/com.sandpolis.core.probe/","text":"Probe Instance Probes are similar to agents, but are only allowed to egress data to a server. They cannot receive messages, so their configuration is immutable unless the system also runs an agent capable of managing probe instances. Probe instances are designed to be extremely lightweight and run on almost any hardware. Probe Configuration { \"network\" : { \"server_address\" : [ String() # An IP address or DNS name with port info ], \"connection\": { \"timeout\" : Number(), # The connection timeout in milliseconds \"interval\" : Number() # The connection poll interval in milliseconds } }, \"collectors\": { \"/memory/total_used\" } } Connection Mode The only connection mode supported by probes is the polling mode. On a configurable schedule, the probe reconnects to a server, flushes any cached data, and closes the connection. The probe may attempt a spontaneous connection outside of the regular schedule at any time. If a server is overloaded, the probe's connection attempt may not be accepted. In this case, the probe may choose another server or wait and try again later. Connection Security Unlike agents, probes do not use TLS. Rather, outgoing messages are encrypted with AES256 using a sesion key derived from a master key embedded in the configuration. No two connections will use the same session key, so compromising it will only yield an attacker decrypted data for the remainder of the connection.","title":"Probe Instance"},{"location":"specification/com.sandpolis.core.probe/#probe-instance","text":"Probes are similar to agents, but are only allowed to egress data to a server. They cannot receive messages, so their configuration is immutable unless the system also runs an agent capable of managing probe instances. Probe instances are designed to be extremely lightweight and run on almost any hardware.","title":"Probe Instance"},{"location":"specification/com.sandpolis.core.probe/#probe-configuration","text":"{ \"network\" : { \"server_address\" : [ String() # An IP address or DNS name with port info ], \"connection\": { \"timeout\" : Number(), # The connection timeout in milliseconds \"interval\" : Number() # The connection poll interval in milliseconds } }, \"collectors\": { \"/memory/total_used\" } }","title":"Probe Configuration"},{"location":"specification/com.sandpolis.core.probe/#connection-mode","text":"The only connection mode supported by probes is the polling mode. On a configurable schedule, the probe reconnects to a server, flushes any cached data, and closes the connection. The probe may attempt a spontaneous connection outside of the regular schedule at any time. If a server is overloaded, the probe's connection attempt may not be accepted. In this case, the probe may choose another server or wait and try again later.","title":"Connection Mode"},{"location":"specification/com.sandpolis.core.probe/#connection-security","text":"Unlike agents, probes do not use TLS. Rather, outgoing messages are encrypted with AES256 using a sesion key derived from a master key embedded in the configuration. No two connections will use the same session key, so compromising it will only yield an attacker decrypted data for the remainder of the connection.","title":"Connection Security"},{"location":"specification/com.sandpolis.core.server/","text":"Server Instance Every Sandpolis network must include one server instance at minimum. Servers are responsible for coordinating interactions among instances and persisting data. Listening port The Sandpolis server listens on TCP port 8768 by default, but can be configured to listen on a different port or multiple ports concurrently. Instance Configuration { \"storage\" : { \"provider\" : String(default=\"ephemeral\"), # The database storage provider \"mongodb\" : { \"host\" : String(), # The address of the mongodb host \"username\" : String(), # The mongodb user's username \"password\" : String(), # The mongodb user's password } }, \"geolocation\" : { \"service\" : String(values=[\"ip-api.com\", \"keycdn.com\"], default=\"ip-api.com\"), # The name of the geolocation service to use \"key\" : String(), # The service API key \"expiration\" : Number(), # The cache timeout in hours } } First Start If the server starts with ephemeral storage or an empty database, the server enters \"first start\" mode. This mode has the following implications: Default admin password The admin password will be randomized and printed in the server log. All clients are required to force users to change the admin password and setup multi-factor authentication before proceeding after the first login. Connection Blocking The server will refuse connections from IP addresses on a configurable blocklist or those that trigger the global rate-limiting policy. IP address on a configurable whitelist are exempt from rate-limiting. Permissions All user accounts are subject to a set of permissions controlling what server operations are authorized. The inital admin user has complete and irrevocable permissions. By default, additional user accounts are created without permissions and consequently are allowed to do almost nothing. Permissions list Permission Description server.generate Rights to use the generator server.users.list Right to view usernames and permissions of all other users server.users.create Right to create new users (of lesser or equal permissions) server.net.view Right to open the network control panel server.listener.create Right to create a new listener on the server server.listener.list Right to view all listeners on the server server.group.create Right to create a new authentication group on the server server.group.list Right to view all authentication groups on the server agent.system.power Right to shutdown, reboot, etc the agent Agent Groups Agent groups are sets of agents that share one or more authentication schemes. Every group has exactly one owner and zero or more (user) members. Password Authentication Scheme After establishing a connection, agents may present an unsalted SHA512 hash of a password entered by the user to the server. The server compares the password to each agent group until it finds a match. If a match is found, the agent is becomes authenticated to the matching agent group. Otherwise, the connection is closed if more than 5 attempts were made on that connection. Since a user must type the password manually, the server will attempt to configure the certificate authentication scheme for all subsequent connections. Token Authentication Scheme The agent may provide an 8 character alphanumeric time-based token periodically generated by the server from an agent group's secret key. Since a user must type the token in manually, the server will attempt to configure the certificate authentication scheme for all subsequent connections. Certificate Authentication Scheme The agent may provide an X509 \"client\" certificate signed by an agent group's secret key during the initial connection attempt. If the agent certificate was found to be valid, the connection is automatically authenticated without any additional message exchanges. Agent Certificate Expiration The default lifetime for an agent certificate is six months. The following section implies an agent must connect to a server at least once every 1.5 months otherwise it loses its ability to authenticate. Agent Certificate Renewal Once 75% of the lifetime of an agent certificate elapses, the server attempts to issue a new certificate and installs it on the agent. Agent Generators A Generator is a routine which produces some installation artifact according to the parameters set out in an authentication group. The installation artifact can then be used to install an agent on a remote system. Deployers On execution, deployers set up the agent base directory according to its configuration and executes the agent. If the target directory already contains an installation, the old installation is entirely overwritten. Packager A packager is responsible for creating a deployer binary according to the parameters set out in an authentication group. Distributor A distributor is responsible for transferring and executing generated deployer artifacts to remote systems. SSH Distributor The SSH deployer first determines the remote system type and invokes an appropriate packager to generate an installer. The installer is then transferred to the remote host and executed.","title":"Server Instance"},{"location":"specification/com.sandpolis.core.server/#server-instance","text":"Every Sandpolis network must include one server instance at minimum. Servers are responsible for coordinating interactions among instances and persisting data.","title":"Server Instance"},{"location":"specification/com.sandpolis.core.server/#listening-port","text":"The Sandpolis server listens on TCP port 8768 by default, but can be configured to listen on a different port or multiple ports concurrently.","title":"Listening port"},{"location":"specification/com.sandpolis.core.server/#instance-configuration","text":"{ \"storage\" : { \"provider\" : String(default=\"ephemeral\"), # The database storage provider \"mongodb\" : { \"host\" : String(), # The address of the mongodb host \"username\" : String(), # The mongodb user's username \"password\" : String(), # The mongodb user's password } }, \"geolocation\" : { \"service\" : String(values=[\"ip-api.com\", \"keycdn.com\"], default=\"ip-api.com\"), # The name of the geolocation service to use \"key\" : String(), # The service API key \"expiration\" : Number(), # The cache timeout in hours } }","title":"Instance Configuration"},{"location":"specification/com.sandpolis.core.server/#first-start","text":"If the server starts with ephemeral storage or an empty database, the server enters \"first start\" mode. This mode has the following implications:","title":"First Start"},{"location":"specification/com.sandpolis.core.server/#default-admin-password","text":"The admin password will be randomized and printed in the server log. All clients are required to force users to change the admin password and setup multi-factor authentication before proceeding after the first login.","title":"Default admin password"},{"location":"specification/com.sandpolis.core.server/#connection-blocking","text":"The server will refuse connections from IP addresses on a configurable blocklist or those that trigger the global rate-limiting policy. IP address on a configurable whitelist are exempt from rate-limiting.","title":"Connection Blocking"},{"location":"specification/com.sandpolis.core.server/#permissions","text":"All user accounts are subject to a set of permissions controlling what server operations are authorized. The inital admin user has complete and irrevocable permissions. By default, additional user accounts are created without permissions and consequently are allowed to do almost nothing.","title":"Permissions"},{"location":"specification/com.sandpolis.core.server/#permissions-list","text":"Permission Description server.generate Rights to use the generator server.users.list Right to view usernames and permissions of all other users server.users.create Right to create new users (of lesser or equal permissions) server.net.view Right to open the network control panel server.listener.create Right to create a new listener on the server server.listener.list Right to view all listeners on the server server.group.create Right to create a new authentication group on the server server.group.list Right to view all authentication groups on the server agent.system.power Right to shutdown, reboot, etc the agent","title":"Permissions list"},{"location":"specification/com.sandpolis.core.server/#agent-groups","text":"Agent groups are sets of agents that share one or more authentication schemes. Every group has exactly one owner and zero or more (user) members.","title":"Agent Groups"},{"location":"specification/com.sandpolis.core.server/#password-authentication-scheme","text":"After establishing a connection, agents may present an unsalted SHA512 hash of a password entered by the user to the server. The server compares the password to each agent group until it finds a match. If a match is found, the agent is becomes authenticated to the matching agent group. Otherwise, the connection is closed if more than 5 attempts were made on that connection. Since a user must type the password manually, the server will attempt to configure the certificate authentication scheme for all subsequent connections.","title":"Password Authentication Scheme"},{"location":"specification/com.sandpolis.core.server/#token-authentication-scheme","text":"The agent may provide an 8 character alphanumeric time-based token periodically generated by the server from an agent group's secret key. Since a user must type the token in manually, the server will attempt to configure the certificate authentication scheme for all subsequent connections.","title":"Token Authentication Scheme"},{"location":"specification/com.sandpolis.core.server/#certificate-authentication-scheme","text":"The agent may provide an X509 \"client\" certificate signed by an agent group's secret key during the initial connection attempt. If the agent certificate was found to be valid, the connection is automatically authenticated without any additional message exchanges.","title":"Certificate Authentication Scheme"},{"location":"specification/com.sandpolis.core.server/#agent-certificate-expiration","text":"The default lifetime for an agent certificate is six months. The following section implies an agent must connect to a server at least once every 1.5 months otherwise it loses its ability to authenticate.","title":"Agent Certificate Expiration"},{"location":"specification/com.sandpolis.core.server/#agent-certificate-renewal","text":"Once 75% of the lifetime of an agent certificate elapses, the server attempts to issue a new certificate and installs it on the agent.","title":"Agent Certificate Renewal"},{"location":"specification/com.sandpolis.core.server/#agent-generators","text":"A Generator is a routine which produces some installation artifact according to the parameters set out in an authentication group. The installation artifact can then be used to install an agent on a remote system.","title":"Agent Generators"},{"location":"specification/com.sandpolis.core.server/#deployers","text":"On execution, deployers set up the agent base directory according to its configuration and executes the agent. If the target directory already contains an installation, the old installation is entirely overwritten.","title":"Deployers"},{"location":"specification/com.sandpolis.core.server/#packager","text":"A packager is responsible for creating a deployer binary according to the parameters set out in an authentication group.","title":"Packager"},{"location":"specification/com.sandpolis.core.server/#distributor","text":"A distributor is responsible for transferring and executing generated deployer artifacts to remote systems.","title":"Distributor"},{"location":"specification/com.sandpolis.core.server/#ssh-distributor","text":"The SSH deployer first determines the remote system type and invokes an appropriate packager to generate an installer. The installer is then transferred to the remote host and executed.","title":"SSH Distributor"},{"location":"specification/com.sandpolis.core.serveragent/","text":"Server/Agent Messages Message Sources Destinations Description RQ_AuthSession agent server Request to authenticate an agent session RQ_RefreshAuthCertificate server agent Request to refresh an agent's authentication certificate RQ_AgentMetadata server agent Request agent metadata RS_AgentMetadata agent server Response containing agent metadata RQ_FindBootAgents client , server agent Request to locate all installed boot agents RS_FindBootAgents agent client , server Response listing boot agent installations RQ_FindBootAgentCandidates client , server agent Request candidate partitions and devices that may be suitable for a boot agent installation RS_FindBootAgentCandidates agent client , server Response listing boot agent installation candidates RQ_InstallBootAgent client , server agent Request a boot agent be installed on the system RQ_UninstallBootAgent client , server agent Request a boot agent be uninstalled from the system RQ_LaunchBootAgent client , server agent Request that the boot agent be started RQ_ChangePowerState client , server agent Request that the agent alter its power state Agent Authentication Messages RQ_AuthSession Field Type Requirements Description password string 8 - 64 characters The password text token string 8 characters The authentication token RQ_RefreshAuthCertificate Field Type Requirements Description General Messages RQ_AgentMetadata RS_AgentMetadata Field Type Requirements Description hostname string 0 - 64 characters The agent's network hostname os OsType The agent's OS family arch string The agent's CPU architecture boot_agent_detected bool Whether a boot agent was detected on the system Boot Agent Messages RQ_FindBootAgents Field Type Requirements Description RS_FindBootAgents Field Type Requirements Description RQ_InstallBootAgent Field Type Requirements Description partition_uuid string The UUID of the target partition device_uuid string The UUID of the target device interface_mac string The MAC address of the network interface to use for connections use_dhcp bool Whether DHCP will be used static_ip string A static IP address as an alternative to DHCP netmask string The netmask corresponding to the static IP gateway_ip string The gateway IP RS_InstallBootAgent Field Description INSTALL_BOOT_AGENT_OK INSTALL_BOOT_AGENT_ACCESS_DENIED RQ_UninstallBootAgent Field Type Requirements Description target_uuid string The UUID of the partition containing the boot agent RS_UninstallBootAgent Field Description UNINSTALL_BOOT_AGENT_OK UNINSTALL_BOOT_AGENT_ACCESS_DENIED RQ_LaunchBootAgent Field Type Requirements Description target_uuid string The UUID of the partition containing the boot agent RS_LaunchBootAgent Field Description LAUNCH_BOOT_AGENT_OK LAUNCH_BOOT_AGENT_ACCESS_DENIED LAUNCH_BOOT_AGENT_FAILED RQ_ChangePowerState Field Type Requirements Description new_state string The desired power state","title":"Server/Agent Messages"},{"location":"specification/com.sandpolis.core.serveragent/#serveragent-messages","text":"Message Sources Destinations Description RQ_AuthSession agent server Request to authenticate an agent session RQ_RefreshAuthCertificate server agent Request to refresh an agent's authentication certificate RQ_AgentMetadata server agent Request agent metadata RS_AgentMetadata agent server Response containing agent metadata RQ_FindBootAgents client , server agent Request to locate all installed boot agents RS_FindBootAgents agent client , server Response listing boot agent installations RQ_FindBootAgentCandidates client , server agent Request candidate partitions and devices that may be suitable for a boot agent installation RS_FindBootAgentCandidates agent client , server Response listing boot agent installation candidates RQ_InstallBootAgent client , server agent Request a boot agent be installed on the system RQ_UninstallBootAgent client , server agent Request a boot agent be uninstalled from the system RQ_LaunchBootAgent client , server agent Request that the boot agent be started RQ_ChangePowerState client , server agent Request that the agent alter its power state","title":"Server/Agent Messages"},{"location":"specification/com.sandpolis.core.serveragent/#agent-authentication-messages","text":"","title":"Agent Authentication Messages"},{"location":"specification/com.sandpolis.core.serveragent/#rq_authsession","text":"Field Type Requirements Description password string 8 - 64 characters The password text token string 8 characters The authentication token","title":"RQ_AuthSession"},{"location":"specification/com.sandpolis.core.serveragent/#rq_refreshauthcertificate","text":"Field Type Requirements Description","title":"RQ_RefreshAuthCertificate"},{"location":"specification/com.sandpolis.core.serveragent/#general-messages","text":"","title":"General Messages"},{"location":"specification/com.sandpolis.core.serveragent/#rq_agentmetadata","text":"","title":"RQ_AgentMetadata"},{"location":"specification/com.sandpolis.core.serveragent/#rs_agentmetadata","text":"Field Type Requirements Description hostname string 0 - 64 characters The agent's network hostname os OsType The agent's OS family arch string The agent's CPU architecture boot_agent_detected bool Whether a boot agent was detected on the system","title":"RS_AgentMetadata"},{"location":"specification/com.sandpolis.core.serveragent/#boot-agent-messages","text":"","title":"Boot Agent Messages"},{"location":"specification/com.sandpolis.core.serveragent/#rq_findbootagents","text":"Field Type Requirements Description","title":"RQ_FindBootAgents"},{"location":"specification/com.sandpolis.core.serveragent/#rs_findbootagents","text":"Field Type Requirements Description","title":"RS_FindBootAgents"},{"location":"specification/com.sandpolis.core.serveragent/#rq_installbootagent","text":"Field Type Requirements Description partition_uuid string The UUID of the target partition device_uuid string The UUID of the target device interface_mac string The MAC address of the network interface to use for connections use_dhcp bool Whether DHCP will be used static_ip string A static IP address as an alternative to DHCP netmask string The netmask corresponding to the static IP gateway_ip string The gateway IP","title":"RQ_InstallBootAgent"},{"location":"specification/com.sandpolis.core.serveragent/#rs_installbootagent","text":"Field Description INSTALL_BOOT_AGENT_OK INSTALL_BOOT_AGENT_ACCESS_DENIED","title":"RS_InstallBootAgent"},{"location":"specification/com.sandpolis.core.serveragent/#rq_uninstallbootagent","text":"Field Type Requirements Description target_uuid string The UUID of the partition containing the boot agent","title":"RQ_UninstallBootAgent"},{"location":"specification/com.sandpolis.core.serveragent/#rs_uninstallbootagent","text":"Field Description UNINSTALL_BOOT_AGENT_OK UNINSTALL_BOOT_AGENT_ACCESS_DENIED","title":"RS_UninstallBootAgent"},{"location":"specification/com.sandpolis.core.serveragent/#rq_launchbootagent","text":"Field Type Requirements Description target_uuid string The UUID of the partition containing the boot agent","title":"RQ_LaunchBootAgent"},{"location":"specification/com.sandpolis.core.serveragent/#rs_launchbootagent","text":"Field Description LAUNCH_BOOT_AGENT_OK LAUNCH_BOOT_AGENT_ACCESS_DENIED LAUNCH_BOOT_AGENT_FAILED","title":"RS_LaunchBootAgent"},{"location":"specification/com.sandpolis.core.serveragent/#rq_changepowerstate","text":"Field Type Requirements Description new_state string The desired power state","title":"RQ_ChangePowerState"},{"location":"specification/com.sandpolis.plugin.agent/","text":"Alert Plugin The alert plugin allows various kinds of system events to trigger user notifications. Alert Level Each user has an alert level that determines what alert notifications they will receive. Alert Level Description NORMAL Indicates normal operations AWAY Indicates that the user is away from their computer and any unexpected user activity should be considered suspicious Device Classes Device Class Description WORKSTATION SERVER EMBEDDED Messages Message Sources Destinations EV_Alert agent server Resource Alerts Systemd Alerts","title":"Alert Plugin"},{"location":"specification/com.sandpolis.plugin.agent/#alert-plugin","text":"The alert plugin allows various kinds of system events to trigger user notifications.","title":"Alert Plugin"},{"location":"specification/com.sandpolis.plugin.agent/#alert-level","text":"Each user has an alert level that determines what alert notifications they will receive. Alert Level Description NORMAL Indicates normal operations AWAY Indicates that the user is away from their computer and any unexpected user activity should be considered suspicious","title":"Alert Level"},{"location":"specification/com.sandpolis.plugin.agent/#device-classes","text":"Device Class Description WORKSTATION SERVER EMBEDDED","title":"Device Classes"},{"location":"specification/com.sandpolis.plugin.agent/#messages","text":"Message Sources Destinations EV_Alert agent server","title":"Messages"},{"location":"specification/com.sandpolis.plugin.agent/#resource-alerts","text":"","title":"Resource Alerts"},{"location":"specification/com.sandpolis.plugin.agent/#systemd-alerts","text":"","title":"Systemd Alerts"},{"location":"specification/com.sandpolis.plugin.desktop/","text":"Desktop Plugin The desktop plugin provides remote desktop and clipboard integration. Messages Message Sources Destinations RQ_DesktopList client agent RS_DesktopList agent client RQ_DesktopStream client agent EV_DesktopInput client agent EV_DesktopOutput agent client RQ_Screenshot RS_Screenshot RQ_DesktopList Request for a listing of available desktops. Field Type Requirements Description RS_DesktopList Response containing all available desktops. Field Type Requirements Description desktop::name string The desktop name desktop::width int32 The desktop width in pixels desktop::height int32 The desktop height in pixels RQ_DesktopStream Request a new desktop stream be established. Field Type Requirements Description stream_id int32 desktop_uuid string capture_mode string poll or hook color_mode string rgb888 , rgb565 , or rgb332 compression_mode string zlib scale_factor double EV_DesktopInput EV_DesktopInput contains key, mouse, and clipboard data. Field Type Requirements Description key_pressed string key_released string key_typed string pointer_pressed int32 pointer_released int32 pointer_x int32 pointer_y int32 scale_factor double clipboard string EV_DesktopOutput EV_DesktopOutput contains pixel data and clipboard data. Field Type Requirements Description width int32 The width of the destination block in pixels height int32 The height of the destination block in pixels dest_x int32 The X coordinate of the destination block's top left corner dest_y int32 The Y coordinate of the destination block's top left corner source_x int32 The X coordinate of the source block's top left corner source_y int32 The Y coordinate of the source block's top left corner pixel_data bytes The pixel data encoded according to the session's parameters clipboard string Clipboard data","title":"Desktop Plugin"},{"location":"specification/com.sandpolis.plugin.desktop/#desktop-plugin","text":"The desktop plugin provides remote desktop and clipboard integration.","title":"Desktop Plugin"},{"location":"specification/com.sandpolis.plugin.desktop/#messages","text":"Message Sources Destinations RQ_DesktopList client agent RS_DesktopList agent client RQ_DesktopStream client agent EV_DesktopInput client agent EV_DesktopOutput agent client RQ_Screenshot RS_Screenshot","title":"Messages"},{"location":"specification/com.sandpolis.plugin.desktop/#rq_desktoplist","text":"Request for a listing of available desktops. Field Type Requirements Description","title":"RQ_DesktopList"},{"location":"specification/com.sandpolis.plugin.desktop/#rs_desktoplist","text":"Response containing all available desktops. Field Type Requirements Description desktop::name string The desktop name desktop::width int32 The desktop width in pixels desktop::height int32 The desktop height in pixels","title":"RS_DesktopList"},{"location":"specification/com.sandpolis.plugin.desktop/#rq_desktopstream","text":"Request a new desktop stream be established. Field Type Requirements Description stream_id int32 desktop_uuid string capture_mode string poll or hook color_mode string rgb888 , rgb565 , or rgb332 compression_mode string zlib scale_factor double","title":"RQ_DesktopStream"},{"location":"specification/com.sandpolis.plugin.desktop/#ev_desktopinput","text":"EV_DesktopInput contains key, mouse, and clipboard data. Field Type Requirements Description key_pressed string key_released string key_typed string pointer_pressed int32 pointer_released int32 pointer_x int32 pointer_y int32 scale_factor double clipboard string","title":"EV_DesktopInput"},{"location":"specification/com.sandpolis.plugin.desktop/#ev_desktopoutput","text":"EV_DesktopOutput contains pixel data and clipboard data. Field Type Requirements Description width int32 The width of the destination block in pixels height int32 The height of the destination block in pixels dest_x int32 The X coordinate of the destination block's top left corner dest_y int32 The Y coordinate of the destination block's top left corner source_x int32 The X coordinate of the source block's top left corner source_y int32 The Y coordinate of the source block's top left corner pixel_data bytes The pixel data encoded according to the session's parameters clipboard string Clipboard data","title":"EV_DesktopOutput"},{"location":"specification/com.sandpolis.plugin.device/","text":"Device Plugin The device plugin extends management functionality out to agent-less devices. Subagents Subagents are devices that do not have Sandpolis agent software installed, but are instead managed via a third-party protocol such as SSH, IPMI, or SNMP from an instance called the gateway . The gateway instance for a subagent may be an independent agent or a server. Communicators A subagent communicates to its gateway instance over one of the following well-known protocols. Since subagents must accept incoming connections, the gateway instance usually must reside on the same network segment. WOL The WOL communicator is able to send Wake-on-LAN magic packets to listening devices. SSH The SSH communicator establishes SSH sessions with remote devices. Property Description ssh.username The SSH username ssh.password The SSH password ssh.private_key The SSH private key IPMI The IPMI communicator runs IPMI commands on remote devices. Property Description ipmi.username The IPMI username ipmi.password The IPMI password SNMP The SNMP communicator reads and writes standard MIBs on remote devices. Property Description snmp.version The SNMP version snmp.community The SNMP community string if version < 3 snmp.privacy.type snmp.privacy.secret snmp.authentication.type snmp.authentication.secret Messages Message Sources Destinations RQ_FindSubagents client , server agent RS_FindSubagents agent client , server RQ_RegisterSubagent client server RQ_ConfigureSubagent server agent RQ_IpmiCommand RQ_SnmpWalk RQ_SshCommand RQ_SendWolPacket RS_SendWolPacket RQ_FindSubagents Scan the local network (if it's smaller than a /16) for devices that may be candidate subagents. For the ssh communicator, a TCP connection is attempted on port 22 For the snmp communicator, probes are sent via UDP port 161 For the ipmi communicator, probes are sent via UDP port 623 Field Type Requirements Description gateway_uuid string The UUID of a gateway instance communicators repeated string ssh , snmp , ipmi The communicator types to search RS_FindSubagents Field Type Requirements Description ssh_device::ip_address string IPv4 or IPv6 address Device IP address ssh_device::mac_address string MAC address Device MAC address ssh_device::fingerprint string Device SSH fingerprint snmp_device::ip_address string IPv4 or IPv6 address Device IP address ipmi_device::ip_address string IPv4 or IPv6 address Device IP address RQ_SnmpWalk Field Type Requirements Description oid string An OID string Request an SNMP walk operation be executed RS_SnmpWalk Field Type Requirements Description data::oid string data::type string data::value string","title":"Device Plugin"},{"location":"specification/com.sandpolis.plugin.device/#device-plugin","text":"The device plugin extends management functionality out to agent-less devices.","title":"Device Plugin"},{"location":"specification/com.sandpolis.plugin.device/#subagents","text":"Subagents are devices that do not have Sandpolis agent software installed, but are instead managed via a third-party protocol such as SSH, IPMI, or SNMP from an instance called the gateway . The gateway instance for a subagent may be an independent agent or a server.","title":"Subagents"},{"location":"specification/com.sandpolis.plugin.device/#communicators","text":"A subagent communicates to its gateway instance over one of the following well-known protocols. Since subagents must accept incoming connections, the gateway instance usually must reside on the same network segment.","title":"Communicators"},{"location":"specification/com.sandpolis.plugin.device/#wol","text":"The WOL communicator is able to send Wake-on-LAN magic packets to listening devices.","title":"WOL"},{"location":"specification/com.sandpolis.plugin.device/#ssh","text":"The SSH communicator establishes SSH sessions with remote devices. Property Description ssh.username The SSH username ssh.password The SSH password ssh.private_key The SSH private key","title":"SSH"},{"location":"specification/com.sandpolis.plugin.device/#ipmi","text":"The IPMI communicator runs IPMI commands on remote devices. Property Description ipmi.username The IPMI username ipmi.password The IPMI password","title":"IPMI"},{"location":"specification/com.sandpolis.plugin.device/#snmp","text":"The SNMP communicator reads and writes standard MIBs on remote devices. Property Description snmp.version The SNMP version snmp.community The SNMP community string if version < 3 snmp.privacy.type snmp.privacy.secret snmp.authentication.type snmp.authentication.secret","title":"SNMP"},{"location":"specification/com.sandpolis.plugin.device/#messages","text":"Message Sources Destinations RQ_FindSubagents client , server agent RS_FindSubagents agent client , server RQ_RegisterSubagent client server RQ_ConfigureSubagent server agent RQ_IpmiCommand RQ_SnmpWalk RQ_SshCommand RQ_SendWolPacket RS_SendWolPacket","title":"Messages"},{"location":"specification/com.sandpolis.plugin.device/#rq_findsubagents","text":"Scan the local network (if it's smaller than a /16) for devices that may be candidate subagents. For the ssh communicator, a TCP connection is attempted on port 22 For the snmp communicator, probes are sent via UDP port 161 For the ipmi communicator, probes are sent via UDP port 623 Field Type Requirements Description gateway_uuid string The UUID of a gateway instance communicators repeated string ssh , snmp , ipmi The communicator types to search","title":"RQ_FindSubagents"},{"location":"specification/com.sandpolis.plugin.device/#rs_findsubagents","text":"Field Type Requirements Description ssh_device::ip_address string IPv4 or IPv6 address Device IP address ssh_device::mac_address string MAC address Device MAC address ssh_device::fingerprint string Device SSH fingerprint snmp_device::ip_address string IPv4 or IPv6 address Device IP address ipmi_device::ip_address string IPv4 or IPv6 address Device IP address","title":"RS_FindSubagents"},{"location":"specification/com.sandpolis.plugin.device/#rq_snmpwalk","text":"Field Type Requirements Description oid string An OID string Request an SNMP walk operation be executed","title":"RQ_SnmpWalk"},{"location":"specification/com.sandpolis.plugin.device/#rs_snmpwalk","text":"Field Type Requirements Description data::oid string data::type string data::value string","title":"RS_SnmpWalk"},{"location":"specification/com.sandpolis.plugin.filesystem/","text":"Filesystem Plugin The filesystem plugin exposes agent and client filesystems to Sandpolis. Mounting Remote filesystems may be mounted on clients or agents with FUSE. Once established, the mount is permanent until explicitly closed by the user. By default, the entire filesystem is mounted, but can be configured to only expose a particular subtree. Agent mount An agent's filesystem may be mounted to a mountpoint on another agent or on a client's machine. Client mount A client's filesystem may be mounted to a mountpoint on an agent's machine. Permissions list Permission Description agent.fs.mount Rights to mount an agent's filesystem agent.fs.read Rights to read an agent's filesystem agent.fs.write Rights to write an agent's filesystem client.fs.mount Rights to mount the current client's filesystem client.fs.read Rights to read the current client's filesystem client.fs.write Rights to write the current client's filesystem Messages Message Sources Destinations Description RQ_DirectoryListing client agent RS_DirectoryListing agent client RQ_MountDirectory client agent RQ_UnmountDirectory client agent RQ_FileStats client agent RS_FileStats RQ_DeleteFile client agent RQ_DirectoryStream client agent EV_DirectoryChange agent client","title":"Filesystem Plugin"},{"location":"specification/com.sandpolis.plugin.filesystem/#filesystem-plugin","text":"The filesystem plugin exposes agent and client filesystems to Sandpolis.","title":"Filesystem Plugin"},{"location":"specification/com.sandpolis.plugin.filesystem/#mounting","text":"Remote filesystems may be mounted on clients or agents with FUSE. Once established, the mount is permanent until explicitly closed by the user. By default, the entire filesystem is mounted, but can be configured to only expose a particular subtree.","title":"Mounting"},{"location":"specification/com.sandpolis.plugin.filesystem/#agent-mount","text":"An agent's filesystem may be mounted to a mountpoint on another agent or on a client's machine.","title":"Agent mount"},{"location":"specification/com.sandpolis.plugin.filesystem/#client-mount","text":"A client's filesystem may be mounted to a mountpoint on an agent's machine.","title":"Client mount"},{"location":"specification/com.sandpolis.plugin.filesystem/#permissions-list","text":"Permission Description agent.fs.mount Rights to mount an agent's filesystem agent.fs.read Rights to read an agent's filesystem agent.fs.write Rights to write an agent's filesystem client.fs.mount Rights to mount the current client's filesystem client.fs.read Rights to read the current client's filesystem client.fs.write Rights to write the current client's filesystem","title":"Permissions list"},{"location":"specification/com.sandpolis.plugin.filesystem/#messages","text":"Message Sources Destinations Description RQ_DirectoryListing client agent RS_DirectoryListing agent client RQ_MountDirectory client agent RQ_UnmountDirectory client agent RQ_FileStats client agent RS_FileStats RQ_DeleteFile client agent RQ_DirectoryStream client agent EV_DirectoryChange agent client","title":"Messages"},{"location":"specification/com.sandpolis.plugin.shell/","text":"Shell Plugin The shell plugin integrates with various kinds of system shells. Shell Capability Label Shell Name bash (zsh, ash, dash) fish powershell cmd.exe ksh csh (tcsh) Messages Message Sources Destinations Description RQ_ShellStream client agent Request to start a new shell session EV_ShellInput client agent Event containing standard-input to a shell EV_ShellOutput agent client Event containing standard-output and standard-error RQ_FindShells client agent Request to locate supported shells on the system RS_FindShells agent client Response containing supported shell information RQ_Execute client agent Request to execute a command snippet in a shell RS_Execute agent client Response containing execution results RQ_FindShells Field Type Requirements Description RS_FindShells Field Type Requirements Description shell::path string Filesystem path The location of the shell executable shell::capability repeated string A list of shell capabilities RQ_Execute Field Type Requirements Description shell_type command repeated string The commands to execute timeout int32 ignore_stdout bool ignore_stderr bool RS_Execute Field Type Requirements Description EV_ShellInput Field Type Requirements Description stdin bytes 0 - 65535 bytes The process standard-input rows_changed int32 cols_changed int32 EV_ShellOutput Field Type Requirements Description stdout bytes 0 - 65535 bytes The process standard-output stderr bytes 0 - 65535 bytes The process standard-error RQ_ShellStream Field Type Requirements Description stream_id int32 capability string environment map rows int32 cols int32","title":"Shell Plugin"},{"location":"specification/com.sandpolis.plugin.shell/#shell-plugin","text":"The shell plugin integrates with various kinds of system shells.","title":"Shell Plugin"},{"location":"specification/com.sandpolis.plugin.shell/#shell-capability","text":"Label Shell Name bash (zsh, ash, dash) fish powershell cmd.exe ksh csh (tcsh)","title":"Shell Capability"},{"location":"specification/com.sandpolis.plugin.shell/#messages","text":"Message Sources Destinations Description RQ_ShellStream client agent Request to start a new shell session EV_ShellInput client agent Event containing standard-input to a shell EV_ShellOutput agent client Event containing standard-output and standard-error RQ_FindShells client agent Request to locate supported shells on the system RS_FindShells agent client Response containing supported shell information RQ_Execute client agent Request to execute a command snippet in a shell RS_Execute agent client Response containing execution results","title":"Messages"},{"location":"specification/com.sandpolis.plugin.shell/#rq_findshells","text":"Field Type Requirements Description","title":"RQ_FindShells"},{"location":"specification/com.sandpolis.plugin.shell/#rs_findshells","text":"Field Type Requirements Description shell::path string Filesystem path The location of the shell executable shell::capability repeated string A list of shell capabilities","title":"RS_FindShells"},{"location":"specification/com.sandpolis.plugin.shell/#rq_execute","text":"Field Type Requirements Description shell_type command repeated string The commands to execute timeout int32 ignore_stdout bool ignore_stderr bool","title":"RQ_Execute"},{"location":"specification/com.sandpolis.plugin.shell/#rs_execute","text":"Field Type Requirements Description","title":"RS_Execute"},{"location":"specification/com.sandpolis.plugin.shell/#ev_shellinput","text":"Field Type Requirements Description stdin bytes 0 - 65535 bytes The process standard-input rows_changed int32 cols_changed int32","title":"EV_ShellInput"},{"location":"specification/com.sandpolis.plugin.shell/#ev_shelloutput","text":"Field Type Requirements Description stdout bytes 0 - 65535 bytes The process standard-output stderr bytes 0 - 65535 bytes The process standard-error","title":"EV_ShellOutput"},{"location":"specification/com.sandpolis.plugin.shell/#rq_shellstream","text":"Field Type Requirements Description stream_id int32 capability string environment map rows int32 cols int32","title":"RQ_ShellStream"},{"location":"specification/com.sandpolis.plugin.snapshot/","text":"Snapshot Plugin The snapshot plugin gives agents the ability to take and apply snapshots, even on filesystems that don't natively support snapshots. Block-based snapshots The target device is divided into blocks of variable size (power of 2 only). Each block has a corresponding block hash which is the murmur3 128-bit hash of its content. File-based snapshots Partition size considerations On-premise Server (1 TiB) = (100 MiB / s) * t t = 1000 s ~ 16 minutes Off-premise Server (1 TiB) = (1 MiB / s) * t t = 100000 s ~ 27 hours Server The server is responsible for storing snapshot data and uploading/downloading it to/from agents. Snapshot format Snapshot contents are stored in QEMU qcow2 files on the server. This format is mature and supports useful features like compression and encryption. Boot Agent All snapshot read/write operations are run from a boot agent rather than the regular agent. This ensures snapshots are perfectly consistent, but implies some amount of downtime during the operation. Create Snapshot If there exist no previous snapshots, the boot agent first determines the appropriate block size for the disk. The agent may take into account the size of the disk or the erase-block size of an SSD, but the block size must be a power of two. If allowed, the boot agent will wipe the disk's free space before continuing. This can significantly decrease the size of the resulting snapshot because empty blocks are omitted. If there exists a previous snapshot for the disk, the boot agent receives a stream of block hashes. A single worker thread reads blocks from the disk and compares their hashes against the block hashes retrieved from the server. If the hashes do not match, the block is passed into a send queue to be egressed to the server. Apply Snapshot If there exists a previous snapshot for the disk, the boot agent initiates a stream of block hashes. A single worker thread reads blocks from the disk and passes their hashes into a send queue to be egressed to the server. Simultaneously, the boot agent receives a stream of block data which are placed into a write queue to be written to the device. Snapshot Messages Message Sources Destinations Description RQ_CreateSnapshot client server Create a new snapshot on a target agent RQ_ApplySnapshot client server Apply an existing snapshot on a target agent RQ_SnapshotStream server agent Create a new snapshot stream EV_SnapshotDataBlock server , agent server , agent An event containing compressed snapshot data EV_SnapshotHashBlock server , agent server , agent An event containing one or more contiguous block hashes RQ_CreateSnapshot Field Type Requirements Description agent_uuid string The target agent's UUID partition_uuid string The target partition's UUID RQ_ApplySnapshot Field Type Requirements Description agent_uuid string The target agent's UUID partition_uuid string The target partition's UUID snapshot_uuid string The snapshot's UUID RQ_SnapshotStream Field Type Requirements Description stream_id int32 The stream's ID operation string \"create\" or \"apply\" The snapshot operation type partition_uuid string The target partition uuid block_size int32 The block size in bytes EV_SnapshotDataBlock Field Type Requirements Description offset int64 The block's offset data bytes The block's contents compressed with zlib EV_SnapshotHashBlock Field Type Requirements Description offset int64 The offset of the block that the first hash corresponds hash repeated bytes A list of consecutive block hashes Permissions list Permission Description agent.snapshot.create Rights create new snapshots of agent disks agent.snapshot.apply Rights apply existing snapshots to agent disks server.snapshot.list Rights to list existing snapshots stored by the server Configuration Property Default Description s7s.snapshot.storage.provider filesystem The storage provider to use s7s.snapshot.storage.filesystem.path The filesystem path","title":"Snapshot Plugin"},{"location":"specification/com.sandpolis.plugin.snapshot/#snapshot-plugin","text":"The snapshot plugin gives agents the ability to take and apply snapshots, even on filesystems that don't natively support snapshots.","title":"Snapshot Plugin"},{"location":"specification/com.sandpolis.plugin.snapshot/#block-based-snapshots","text":"The target device is divided into blocks of variable size (power of 2 only). Each block has a corresponding block hash which is the murmur3 128-bit hash of its content.","title":"Block-based snapshots"},{"location":"specification/com.sandpolis.plugin.snapshot/#file-based-snapshots","text":"","title":"File-based snapshots"},{"location":"specification/com.sandpolis.plugin.snapshot/#partition-size-considerations","text":"","title":"Partition size considerations"},{"location":"specification/com.sandpolis.plugin.snapshot/#on-premise-server","text":"(1 TiB) = (100 MiB / s) * t t = 1000 s ~ 16 minutes","title":"On-premise Server"},{"location":"specification/com.sandpolis.plugin.snapshot/#off-premise-server","text":"(1 TiB) = (1 MiB / s) * t t = 100000 s ~ 27 hours","title":"Off-premise Server"},{"location":"specification/com.sandpolis.plugin.snapshot/#server","text":"The server is responsible for storing snapshot data and uploading/downloading it to/from agents.","title":"Server"},{"location":"specification/com.sandpolis.plugin.snapshot/#snapshot-format","text":"Snapshot contents are stored in QEMU qcow2 files on the server. This format is mature and supports useful features like compression and encryption.","title":"Snapshot format"},{"location":"specification/com.sandpolis.plugin.snapshot/#boot-agent","text":"All snapshot read/write operations are run from a boot agent rather than the regular agent. This ensures snapshots are perfectly consistent, but implies some amount of downtime during the operation.","title":"Boot Agent"},{"location":"specification/com.sandpolis.plugin.snapshot/#create-snapshot","text":"If there exist no previous snapshots, the boot agent first determines the appropriate block size for the disk. The agent may take into account the size of the disk or the erase-block size of an SSD, but the block size must be a power of two. If allowed, the boot agent will wipe the disk's free space before continuing. This can significantly decrease the size of the resulting snapshot because empty blocks are omitted. If there exists a previous snapshot for the disk, the boot agent receives a stream of block hashes. A single worker thread reads blocks from the disk and compares their hashes against the block hashes retrieved from the server. If the hashes do not match, the block is passed into a send queue to be egressed to the server.","title":"Create Snapshot"},{"location":"specification/com.sandpolis.plugin.snapshot/#apply-snapshot","text":"If there exists a previous snapshot for the disk, the boot agent initiates a stream of block hashes. A single worker thread reads blocks from the disk and passes their hashes into a send queue to be egressed to the server. Simultaneously, the boot agent receives a stream of block data which are placed into a write queue to be written to the device.","title":"Apply Snapshot"},{"location":"specification/com.sandpolis.plugin.snapshot/#snapshot-messages","text":"Message Sources Destinations Description RQ_CreateSnapshot client server Create a new snapshot on a target agent RQ_ApplySnapshot client server Apply an existing snapshot on a target agent RQ_SnapshotStream server agent Create a new snapshot stream EV_SnapshotDataBlock server , agent server , agent An event containing compressed snapshot data EV_SnapshotHashBlock server , agent server , agent An event containing one or more contiguous block hashes","title":"Snapshot Messages"},{"location":"specification/com.sandpolis.plugin.snapshot/#rq_createsnapshot","text":"Field Type Requirements Description agent_uuid string The target agent's UUID partition_uuid string The target partition's UUID","title":"RQ_CreateSnapshot"},{"location":"specification/com.sandpolis.plugin.snapshot/#rq_applysnapshot","text":"Field Type Requirements Description agent_uuid string The target agent's UUID partition_uuid string The target partition's UUID snapshot_uuid string The snapshot's UUID","title":"RQ_ApplySnapshot"},{"location":"specification/com.sandpolis.plugin.snapshot/#rq_snapshotstream","text":"Field Type Requirements Description stream_id int32 The stream's ID operation string \"create\" or \"apply\" The snapshot operation type partition_uuid string The target partition uuid block_size int32 The block size in bytes","title":"RQ_SnapshotStream"},{"location":"specification/com.sandpolis.plugin.snapshot/#ev_snapshotdatablock","text":"Field Type Requirements Description offset int64 The block's offset data bytes The block's contents compressed with zlib","title":"EV_SnapshotDataBlock"},{"location":"specification/com.sandpolis.plugin.snapshot/#ev_snapshothashblock","text":"Field Type Requirements Description offset int64 The offset of the block that the first hash corresponds hash repeated bytes A list of consecutive block hashes","title":"EV_SnapshotHashBlock"},{"location":"specification/com.sandpolis.plugin.snapshot/#permissions-list","text":"Permission Description agent.snapshot.create Rights create new snapshots of agent disks agent.snapshot.apply Rights apply existing snapshots to agent disks server.snapshot.list Rights to list existing snapshots stored by the server","title":"Permissions list"},{"location":"specification/com.sandpolis.plugin.snapshot/#configuration","text":"Property Default Description s7s.snapshot.storage.provider filesystem The storage provider to use s7s.snapshot.storage.filesystem.path The filesystem path","title":"Configuration"},{"location":"specification/com.sandpolis.plugin.update/","text":"Update Plugin The update plugin integrates with system package managers. Messages Message Sources Destinations Description RQ_RemovePackages client agent RQ_InstallOrUpdatePackages client agent","title":"Update Plugin"},{"location":"specification/com.sandpolis.plugin.update/#update-plugin","text":"The update plugin integrates with system package managers.","title":"Update Plugin"},{"location":"specification/com.sandpolis.plugin.update/#messages","text":"Message Sources Destinations Description RQ_RemovePackages client agent RQ_InstallOrUpdatePackages client agent","title":"Messages"},{"location":"specification/com.sandpolis.server.vanilla/","text":"Server Installation Types There are two ways to install the server with the recommended approach being Docker. Package Manager Installation Filesystem Layout Pacman (Arch Linux) Path Description /usr/lib/systemd/system/sandpolis-server.service Systemd service definition /usr/share/java/sandpolis-server/lib LIB location /usr/share/java/sandpolis-server/plugin PLUGIN location /var/lib/sandpolis-server/data DATA location Docker Installation","title":"Server"},{"location":"specification/com.sandpolis.server.vanilla/#server","text":"","title":"Server"},{"location":"specification/com.sandpolis.server.vanilla/#installation-types","text":"There are two ways to install the server with the recommended approach being Docker.","title":"Installation Types"},{"location":"specification/com.sandpolis.server.vanilla/#package-manager-installation","text":"","title":"Package Manager Installation"},{"location":"specification/com.sandpolis.server.vanilla/#filesystem-layout","text":"","title":"Filesystem Layout"},{"location":"specification/com.sandpolis.server.vanilla/#pacman-arch-linux","text":"Path Description /usr/lib/systemd/system/sandpolis-server.service Systemd service definition /usr/share/java/sandpolis-server/lib LIB location /usr/share/java/sandpolis-server/plugin PLUGIN location /var/lib/sandpolis-server/data DATA location","title":"Pacman (Arch Linux)"},{"location":"specification/com.sandpolis.server.vanilla/#docker-installation","text":"","title":"Docker Installation"},{"location":"specification/messages/com.sandpolis.core.clientserver/","text":"RQ_BuildAgent Request to build an agent for the given group. Field Type Description group string The group ID config core.instance.AgentConfig The agent configuration generator_options GeneratorOptions Options for the generator component packager_options PackagerOptions Options for the packager component deployment_options DeploymentOptions Options for the deployment component RS_BuildAgent null Field Description BUILD_AGENT_OK 0 BUILD_AGENT_FAILED 1 RQ_CreateGroup null Field Type Description name string The group's name RS_CreateGroup null Field Description CREATE_GROUP_OK 0 CREATE_GROUP_FAILED_ACCESS_DENIED 1 RQ_DeleteGroup null Field Type Description RS_DeleteGroup null Field Description DELETE_GROUP_OK 0 DELETE_GROUP_FAILED_ACCESS_DENIED 1 RQ_UpdateGroup null Field Type Description RS_UpdateGroup null Field Description UPDATE_GROUP_OK 0 UPDATE_GROUP_FAILED_ACCESS_DENIED 1 RQ_CreateListener null Field Type Description address string The listening address port int32 The listening port RS_CreateListener null Field Description CREATE_LISTENER_OK 0 CREATE_LISTENER_ACCESS_DENIED 1 CREATE_LISTENER_INVALID_PORT 2 RQ_DeleteListener null Field Type Description RS_DeleteListener null Field Description DELETE_LISTENER_OK 0 DELETE_LISTENER_ACCESS_DENIED 1 RQ_UpdateListener null Field Type Description RS_UpdateListener null Field Description UPDATE_LISTENER_OK 0 UPDATE_LISTENER_ACCESS_DENIED 1 RQ_Login Request a login from the server Field Type Description username string The login username password string The password totp int32 Time-based One-Time Password token RS_Login null Field Description LOGIN_OK 0 LOGIN_FAILED 1 LOGIN_FAILED_EXPIRED_USER 2 LOGIN_INVALID_USERNAME 3 LOGIN_INVALID_PASSWORD 4 LOGIN_INVALID_TOKEN 5 RQ_Logout Request that the current user be logged out Field Type Description RS_Logout null Field Description LOGOUT_OK 0 RQ_ServerBanner Request for the server's banner Field Type Description RS_ServerBanner Response bearing the server's banner Field Type Description maintenance bool Maintenance mode indicates that only superusers will be allowed to login version string The 3-field version of the server banner string A string to display on the login screen banner_image bytes An image to display on the login screen RQ_CreateUser null Field Type Description username string The user's immutable username RS_CreateUser null Field Description CREATE_USER_OK 0 CREATE_USER_ACCESS_DENIED 1 RQ_DeleteUser null Field Type Description RS_DeleteUser null Field Description DELETE_USER_OK 0 DELETE_USER_ACCESS_DENIED 1 RQ_UpdateUser null Field Type Description RS_UpdateUser null Field Description UPDATE_USER_OK 0 UPDATE_USER_ACCESS_DENIED 1","title":"Com.sandpolis.core.clientserver"},{"location":"specification/messages/com.sandpolis.core.clientserver/#rq_buildagent","text":"Request to build an agent for the given group. Field Type Description group string The group ID config core.instance.AgentConfig The agent configuration generator_options GeneratorOptions Options for the generator component packager_options PackagerOptions Options for the packager component deployment_options DeploymentOptions Options for the deployment component","title":"RQ_BuildAgent"},{"location":"specification/messages/com.sandpolis.core.clientserver/#rs_buildagent","text":"null Field Description BUILD_AGENT_OK 0 BUILD_AGENT_FAILED 1","title":"RS_BuildAgent"},{"location":"specification/messages/com.sandpolis.core.clientserver/#rq_creategroup","text":"null Field Type Description name string The group's name","title":"RQ_CreateGroup"},{"location":"specification/messages/com.sandpolis.core.clientserver/#rs_creategroup","text":"null Field Description CREATE_GROUP_OK 0 CREATE_GROUP_FAILED_ACCESS_DENIED 1","title":"RS_CreateGroup"},{"location":"specification/messages/com.sandpolis.core.clientserver/#rq_deletegroup","text":"null Field Type Description","title":"RQ_DeleteGroup"},{"location":"specification/messages/com.sandpolis.core.clientserver/#rs_deletegroup","text":"null Field Description DELETE_GROUP_OK 0 DELETE_GROUP_FAILED_ACCESS_DENIED 1","title":"RS_DeleteGroup"},{"location":"specification/messages/com.sandpolis.core.clientserver/#rq_updategroup","text":"null Field Type Description","title":"RQ_UpdateGroup"},{"location":"specification/messages/com.sandpolis.core.clientserver/#rs_updategroup","text":"null Field Description UPDATE_GROUP_OK 0 UPDATE_GROUP_FAILED_ACCESS_DENIED 1","title":"RS_UpdateGroup"},{"location":"specification/messages/com.sandpolis.core.clientserver/#rq_createlistener","text":"null Field Type Description address string The listening address port int32 The listening port","title":"RQ_CreateListener"},{"location":"specification/messages/com.sandpolis.core.clientserver/#rs_createlistener","text":"null Field Description CREATE_LISTENER_OK 0 CREATE_LISTENER_ACCESS_DENIED 1 CREATE_LISTENER_INVALID_PORT 2","title":"RS_CreateListener"},{"location":"specification/messages/com.sandpolis.core.clientserver/#rq_deletelistener","text":"null Field Type Description","title":"RQ_DeleteListener"},{"location":"specification/messages/com.sandpolis.core.clientserver/#rs_deletelistener","text":"null Field Description DELETE_LISTENER_OK 0 DELETE_LISTENER_ACCESS_DENIED 1","title":"RS_DeleteListener"},{"location":"specification/messages/com.sandpolis.core.clientserver/#rq_updatelistener","text":"null Field Type Description","title":"RQ_UpdateListener"},{"location":"specification/messages/com.sandpolis.core.clientserver/#rs_updatelistener","text":"null Field Description UPDATE_LISTENER_OK 0 UPDATE_LISTENER_ACCESS_DENIED 1","title":"RS_UpdateListener"},{"location":"specification/messages/com.sandpolis.core.clientserver/#rq_login","text":"Request a login from the server Field Type Description username string The login username password string The password totp int32 Time-based One-Time Password token","title":"RQ_Login"},{"location":"specification/messages/com.sandpolis.core.clientserver/#rs_login","text":"null Field Description LOGIN_OK 0 LOGIN_FAILED 1 LOGIN_FAILED_EXPIRED_USER 2 LOGIN_INVALID_USERNAME 3 LOGIN_INVALID_PASSWORD 4 LOGIN_INVALID_TOKEN 5","title":"RS_Login"},{"location":"specification/messages/com.sandpolis.core.clientserver/#rq_logout","text":"Request that the current user be logged out Field Type Description","title":"RQ_Logout"},{"location":"specification/messages/com.sandpolis.core.clientserver/#rs_logout","text":"null Field Description LOGOUT_OK 0","title":"RS_Logout"},{"location":"specification/messages/com.sandpolis.core.clientserver/#rq_serverbanner","text":"Request for the server's banner Field Type Description","title":"RQ_ServerBanner"},{"location":"specification/messages/com.sandpolis.core.clientserver/#rs_serverbanner","text":"Response bearing the server's banner Field Type Description maintenance bool Maintenance mode indicates that only superusers will be allowed to login version string The 3-field version of the server banner string A string to display on the login screen banner_image bytes An image to display on the login screen","title":"RS_ServerBanner"},{"location":"specification/messages/com.sandpolis.core.clientserver/#rq_createuser","text":"null Field Type Description username string The user's immutable username","title":"RQ_CreateUser"},{"location":"specification/messages/com.sandpolis.core.clientserver/#rs_createuser","text":"null Field Description CREATE_USER_OK 0 CREATE_USER_ACCESS_DENIED 1","title":"RS_CreateUser"},{"location":"specification/messages/com.sandpolis.core.clientserver/#rq_deleteuser","text":"null Field Type Description","title":"RQ_DeleteUser"},{"location":"specification/messages/com.sandpolis.core.clientserver/#rs_deleteuser","text":"null Field Description DELETE_USER_OK 0 DELETE_USER_ACCESS_DENIED 1","title":"RS_DeleteUser"},{"location":"specification/messages/com.sandpolis.core.clientserver/#rq_updateuser","text":"null Field Type Description","title":"RQ_UpdateUser"},{"location":"specification/messages/com.sandpolis.core.clientserver/#rs_updateuser","text":"null Field Description UPDATE_USER_OK 0 UPDATE_USER_ACCESS_DENIED 1","title":"RS_UpdateUser"},{"location":"specification/messages/com.sandpolis.core.instance/","text":"RQ_Ping Ping request. Field Type Description RS_Ping Ping response. Field Type Description RQ_PluginOperation Request: Attempt a plugin operation. Field Type Description operation PluginOperation null plugin_config core.instance.PluginConfig null RS_PluginSync null Field Type Description plugin_config core.instance.PluginConfig null RQ_ArtifactDownload A request to download an artifact. Field Type Description coordinates string The coordinates of the artifact to download location bool Whether it's acceptable to receive the external location of the artifact only RS_ArtifactDownload The download response bearing the artifact binary or the artifact's address. Field Type Description binary bytes The artifact binary url string The artifact's HTTP location coordinates string The artifact's maven central coordinates RQ_PluginInstall A request to install a server plugin. Field Type Description plugin_binary bytes The plugin binary plugin_url string The plugin's HTTP location plugin_coordinates string The plugin's maven central coordinates RS_PluginInstall null Field Description PLUGIN_INSTALL_OK 0 PLUGIN_INSTALL_FAILED 1 PLUGIN_INSTALL_FAILED_DISABLED 2 PLUGIN_INSTALL_FAILED_CERTIFICATE 3 PLUGIN_INSTALL_INVALID 4 RQ_STStream null Field Type Description stream_id int32 null permanent bool null oid string null whitelist string null direction Direction null update_period int32 null RS_STStream null Field Description ST_STREAM_OK 0 ST_STREAM_INVALID 1 ST_STREAM_FAILED 2 EV_STStreamData null Field Type Description oid string The object's relative OID removed bool Whether the object corresponding to the OID was removed value_type ValueType The attribute value type timestamp int64 The timestamp associated with the attribute value bytes bytes null bytes_array bytes null string string null string_array string null integer int32 null integer_array int32 null long int64 null long_array int64 null boolean bool null boolean_array bool null double double null double_array double null","title":"Com.sandpolis.core.instance"},{"location":"specification/messages/com.sandpolis.core.instance/#rq_ping","text":"Ping request. Field Type Description","title":"RQ_Ping"},{"location":"specification/messages/com.sandpolis.core.instance/#rs_ping","text":"Ping response. Field Type Description","title":"RS_Ping"},{"location":"specification/messages/com.sandpolis.core.instance/#rq_pluginoperation","text":"Request: Attempt a plugin operation. Field Type Description operation PluginOperation null plugin_config core.instance.PluginConfig null","title":"RQ_PluginOperation"},{"location":"specification/messages/com.sandpolis.core.instance/#rs_pluginsync","text":"null Field Type Description plugin_config core.instance.PluginConfig null","title":"RS_PluginSync"},{"location":"specification/messages/com.sandpolis.core.instance/#rq_artifactdownload","text":"A request to download an artifact. Field Type Description coordinates string The coordinates of the artifact to download location bool Whether it's acceptable to receive the external location of the artifact only","title":"RQ_ArtifactDownload"},{"location":"specification/messages/com.sandpolis.core.instance/#rs_artifactdownload","text":"The download response bearing the artifact binary or the artifact's address. Field Type Description binary bytes The artifact binary url string The artifact's HTTP location coordinates string The artifact's maven central coordinates","title":"RS_ArtifactDownload"},{"location":"specification/messages/com.sandpolis.core.instance/#rq_plugininstall","text":"A request to install a server plugin. Field Type Description plugin_binary bytes The plugin binary plugin_url string The plugin's HTTP location plugin_coordinates string The plugin's maven central coordinates","title":"RQ_PluginInstall"},{"location":"specification/messages/com.sandpolis.core.instance/#rs_plugininstall","text":"null Field Description PLUGIN_INSTALL_OK 0 PLUGIN_INSTALL_FAILED 1 PLUGIN_INSTALL_FAILED_DISABLED 2 PLUGIN_INSTALL_FAILED_CERTIFICATE 3 PLUGIN_INSTALL_INVALID 4","title":"RS_PluginInstall"},{"location":"specification/messages/com.sandpolis.core.instance/#rq_ststream","text":"null Field Type Description stream_id int32 null permanent bool null oid string null whitelist string null direction Direction null update_period int32 null","title":"RQ_STStream"},{"location":"specification/messages/com.sandpolis.core.instance/#rs_ststream","text":"null Field Description ST_STREAM_OK 0 ST_STREAM_INVALID 1 ST_STREAM_FAILED 2","title":"RS_STStream"},{"location":"specification/messages/com.sandpolis.core.instance/#ev_ststreamdata","text":"null Field Type Description oid string The object's relative OID removed bool Whether the object corresponding to the OID was removed value_type ValueType The attribute value type timestamp int64 The timestamp associated with the attribute value bytes bytes null bytes_array bytes null string string null string_array string null integer int32 null integer_array int32 null long int64 null long_array int64 null boolean bool null boolean_array bool null double double null double_array double null","title":"EV_STStreamData"},{"location":"specification/messages/com.sandpolis.core.net/","text":"RQ_Session Request that a new session be created. Any previous sessions associated with the instance are invalidated. Field Type Description instance_uuid string The UUID of the requesting instance instance_type core.instance.InstanceType The instance type of the requesting instance instance_flavor core.instance.InstanceFlavor The instance flavor of the requesting instance RS_Session Respond to a session request with a successful result. Field Type Description instance_sid int32 A SID for the requesting instance server_sid int32 The SID of the server server_uuid string The UUID of the server RQ_DirectConnection Request the server for a new direct connection. Field Type Description cvid int32 The requested node type LinkType The type of connection port int32 An optional listener port. If specified, the requested node will attempt a connection on this port. Otherwise, the server will coordinate the connection. RS_DirectConnection Server response to a connection request. Field Type Description request RQ_Connection The connection request RQ_Connection Request the instance to establish a new connection. Field Type Description host string The host port int32 The port type LinkType The link type EV_EndpointClosed Indicates that a connection has been lost. Field Type Description cvid int32 The node that has lost connection EV_NetworkChange Indicates that the network has been updated. Field Type Description node_added NodeAdded null node_removed NodeRemoved null connection_added LinkAdded null connection_removed LinkRemoved null RQ_StopStream null Field Type Description id int32 The stream ID of the stream to stop RS_StopStream null Field Description STOP_STREAM_OK 0 STOP_STREAM_INVALID 1","title":"Com.sandpolis.core.net"},{"location":"specification/messages/com.sandpolis.core.net/#rq_session","text":"Request that a new session be created. Any previous sessions associated with the instance are invalidated. Field Type Description instance_uuid string The UUID of the requesting instance instance_type core.instance.InstanceType The instance type of the requesting instance instance_flavor core.instance.InstanceFlavor The instance flavor of the requesting instance","title":"RQ_Session"},{"location":"specification/messages/com.sandpolis.core.net/#rs_session","text":"Respond to a session request with a successful result. Field Type Description instance_sid int32 A SID for the requesting instance server_sid int32 The SID of the server server_uuid string The UUID of the server","title":"RS_Session"},{"location":"specification/messages/com.sandpolis.core.net/#rq_directconnection","text":"Request the server for a new direct connection. Field Type Description cvid int32 The requested node type LinkType The type of connection port int32 An optional listener port. If specified, the requested node will attempt a connection on this port. Otherwise, the server will coordinate the connection.","title":"RQ_DirectConnection"},{"location":"specification/messages/com.sandpolis.core.net/#rs_directconnection","text":"Server response to a connection request. Field Type Description request RQ_Connection The connection request","title":"RS_DirectConnection"},{"location":"specification/messages/com.sandpolis.core.net/#rq_connection","text":"Request the instance to establish a new connection. Field Type Description host string The host port int32 The port type LinkType The link type","title":"RQ_Connection"},{"location":"specification/messages/com.sandpolis.core.net/#ev_endpointclosed","text":"Indicates that a connection has been lost. Field Type Description cvid int32 The node that has lost connection","title":"EV_EndpointClosed"},{"location":"specification/messages/com.sandpolis.core.net/#ev_networkchange","text":"Indicates that the network has been updated. Field Type Description node_added NodeAdded null node_removed NodeRemoved null connection_added LinkAdded null connection_removed LinkRemoved null","title":"EV_NetworkChange"},{"location":"specification/messages/com.sandpolis.core.net/#rq_stopstream","text":"null Field Type Description id int32 The stream ID of the stream to stop","title":"RQ_StopStream"},{"location":"specification/messages/com.sandpolis.core.net/#rs_stopstream","text":"null Field Description STOP_STREAM_OK 0 STOP_STREAM_INVALID 1","title":"RS_StopStream"},{"location":"specification/messages/com.sandpolis.core.serveragent/","text":"RQ_AgentMetadata Request metadata from an agent. Sources : server Destinations : agent Response : RS_AgentMetadata Field Type Description RS_AgentMetadata Response containing agent metadata. Sources : agent Destinations : server Request : RQ_AgentMetadata Field Type Description hostname string The network hostname install_directory string The install directory os core.foundation.OsType The OS family boot_agent_detected bool Whether a boot agent was detected on the system RQ_LaunchBootAgent Request that the boot agent be started. Sources : client, server Destinations : agent Response : Outcome Field Type Description target_uuid string The UUID of the partition containing the boot agent RQ_UninstallBootAgent Request a boot agent be uninstalled from the system. Sources : client, server Destinations : agent Response : Outcome Field Type Description target_uuid string The UUID of the partition containing the boot agent RQ_FindBootAgents Request to locate all installed boot agents. Sources : client, server Destinations : agent Response : RS_FindBootAgents Field Type Description RS_FindBootAgents Response listing boot agent installations. Sources : client, server Destinations : agent Request : RQ_FindBootAgents Field Type Description installation BootAgentInstallation null RQ_InstallBootAgent Request a boot agent be installed on the system. Sources : client, server Destinations : agent Response : Outcome Field Type Description partition_uuid string The UUID of the target partition device_uuid string The UUID of the target device interface_mac string The MAC address of the network interface to use for connections use_dhcp bool Whether DHCP will be used static_ip string A static IP address as an alternative to DHCP netmask string The netmask corresponding to the static IP gateway_ip string The gateway IP RQ_FindBootAgentCandidates Request candidate partitions and devices that may be suitable for a boot agent installation. Sources : client, server Destinations : agent Response : RS_FindBootAgentCandidates Field Type Description RS_FindBootAgentCandidates Response listing boot agent installation candidates. Sources : agent Destinations : client, server Request : RQ_FindBootAgents Field Type Description device_candidate DeviceCandidate null partition_candidate PartitionCandidate null RQ_AuthSession Request to authenticate the current session. Sources : agent Destinations : server Response : Outcome Field Type Description password string The group password token string The authentication token RS_AuthSession null Field Description AUTH_SESSION_OK 0 AUTH_SESSION_FAILED 1 RQ_RefreshAuthCertificate Request to refresh an agent's authentication certificate. Sources : server Destinations : agent Response : Outcome Field Type Description certificate bytes The new \"client\" certificate","title":"Com.sandpolis.core.serveragent"},{"location":"specification/messages/com.sandpolis.core.serveragent/#rq_agentmetadata","text":"Request metadata from an agent. Sources : server Destinations : agent Response : RS_AgentMetadata Field Type Description","title":"RQ_AgentMetadata"},{"location":"specification/messages/com.sandpolis.core.serveragent/#rs_agentmetadata","text":"Response containing agent metadata. Sources : agent Destinations : server Request : RQ_AgentMetadata Field Type Description hostname string The network hostname install_directory string The install directory os core.foundation.OsType The OS family boot_agent_detected bool Whether a boot agent was detected on the system","title":"RS_AgentMetadata"},{"location":"specification/messages/com.sandpolis.core.serveragent/#rq_launchbootagent","text":"Request that the boot agent be started. Sources : client, server Destinations : agent Response : Outcome Field Type Description target_uuid string The UUID of the partition containing the boot agent","title":"RQ_LaunchBootAgent"},{"location":"specification/messages/com.sandpolis.core.serveragent/#rq_uninstallbootagent","text":"Request a boot agent be uninstalled from the system. Sources : client, server Destinations : agent Response : Outcome Field Type Description target_uuid string The UUID of the partition containing the boot agent","title":"RQ_UninstallBootAgent"},{"location":"specification/messages/com.sandpolis.core.serveragent/#rq_findbootagents","text":"Request to locate all installed boot agents. Sources : client, server Destinations : agent Response : RS_FindBootAgents Field Type Description","title":"RQ_FindBootAgents"},{"location":"specification/messages/com.sandpolis.core.serveragent/#rs_findbootagents","text":"Response listing boot agent installations. Sources : client, server Destinations : agent Request : RQ_FindBootAgents Field Type Description installation BootAgentInstallation null","title":"RS_FindBootAgents"},{"location":"specification/messages/com.sandpolis.core.serveragent/#rq_installbootagent","text":"Request a boot agent be installed on the system. Sources : client, server Destinations : agent Response : Outcome Field Type Description partition_uuid string The UUID of the target partition device_uuid string The UUID of the target device interface_mac string The MAC address of the network interface to use for connections use_dhcp bool Whether DHCP will be used static_ip string A static IP address as an alternative to DHCP netmask string The netmask corresponding to the static IP gateway_ip string The gateway IP","title":"RQ_InstallBootAgent"},{"location":"specification/messages/com.sandpolis.core.serveragent/#rq_findbootagentcandidates","text":"Request candidate partitions and devices that may be suitable for a boot agent installation. Sources : client, server Destinations : agent Response : RS_FindBootAgentCandidates Field Type Description","title":"RQ_FindBootAgentCandidates"},{"location":"specification/messages/com.sandpolis.core.serveragent/#rs_findbootagentcandidates","text":"Response listing boot agent installation candidates. Sources : agent Destinations : client, server Request : RQ_FindBootAgents Field Type Description device_candidate DeviceCandidate null partition_candidate PartitionCandidate null","title":"RS_FindBootAgentCandidates"},{"location":"specification/messages/com.sandpolis.core.serveragent/#rq_authsession","text":"Request to authenticate the current session. Sources : agent Destinations : server Response : Outcome Field Type Description password string The group password token string The authentication token","title":"RQ_AuthSession"},{"location":"specification/messages/com.sandpolis.core.serveragent/#rs_authsession","text":"null Field Description AUTH_SESSION_OK 0 AUTH_SESSION_FAILED 1","title":"RS_AuthSession"},{"location":"specification/messages/com.sandpolis.core.serveragent/#rq_refreshauthcertificate","text":"Request to refresh an agent's authentication certificate. Sources : server Destinations : agent Response : Outcome Field Type Description certificate bytes The new \"client\" certificate","title":"RQ_RefreshAuthCertificate"},{"location":"specification/messages/com.sandpolis.plugin.desktop/","text":"RQ_DesktopList Request for a listing of available desktops Field Type Description RS_DesktopList Response containing all available desktops Field Type Description desktop Desktop null RQ_DesktopStream null Field Type Description stream_id int32 The requested stream ID desktop_uuid string The desktop to capture RS_DesktopStream null Field Description DESKTOP_STREAM_OK 0 EV_DesktopInput null Field Type Description key_pressed string key_released string key_typed string pointer_pressed PointerButton pointer_released PointerButton pointer_x int32 The X coordinate of the pointer pointer_y int32 The Y coordinate of the pointer scale_factor double Scale factor clipboard string Clipboard data EV_DesktopOutput null Field Type Description width int32 The width of the destination block in pixels height int32 The height of the destination block in pixels dest_x int32 The X coordinate of the destination block's top left corner dest_y int32 The Y coordinate of the destination block's top left corner source_x int32 The X coordinate of the source block's top left corner source_y int32 The Y coordinate of the source block's top left corner pixel_data bytes The pixel data encoded according to the session's parameters clipboard string Clipboard data RQ_CaptureScreenshot null Field Type Description desktop_uuid string The desktop to capture RS_CaptureScreenshot null Field Type Description data bytes null","title":"Com.sandpolis.plugin.desktop"},{"location":"specification/messages/com.sandpolis.plugin.desktop/#rq_desktoplist","text":"Request for a listing of available desktops Field Type Description","title":"RQ_DesktopList"},{"location":"specification/messages/com.sandpolis.plugin.desktop/#rs_desktoplist","text":"Response containing all available desktops Field Type Description desktop Desktop null","title":"RS_DesktopList"},{"location":"specification/messages/com.sandpolis.plugin.desktop/#rq_desktopstream","text":"null Field Type Description stream_id int32 The requested stream ID desktop_uuid string The desktop to capture","title":"RQ_DesktopStream"},{"location":"specification/messages/com.sandpolis.plugin.desktop/#rs_desktopstream","text":"null Field Description DESKTOP_STREAM_OK 0","title":"RS_DesktopStream"},{"location":"specification/messages/com.sandpolis.plugin.desktop/#ev_desktopinput","text":"null Field Type Description key_pressed string key_released string key_typed string pointer_pressed PointerButton pointer_released PointerButton pointer_x int32 The X coordinate of the pointer pointer_y int32 The Y coordinate of the pointer scale_factor double Scale factor clipboard string Clipboard data","title":"EV_DesktopInput"},{"location":"specification/messages/com.sandpolis.plugin.desktop/#ev_desktopoutput","text":"null Field Type Description width int32 The width of the destination block in pixels height int32 The height of the destination block in pixels dest_x int32 The X coordinate of the destination block's top left corner dest_y int32 The Y coordinate of the destination block's top left corner source_x int32 The X coordinate of the source block's top left corner source_y int32 The Y coordinate of the source block's top left corner pixel_data bytes The pixel data encoded according to the session's parameters clipboard string Clipboard data","title":"EV_DesktopOutput"},{"location":"specification/messages/com.sandpolis.plugin.desktop/#rq_capturescreenshot","text":"null Field Type Description desktop_uuid string The desktop to capture","title":"RQ_CaptureScreenshot"},{"location":"specification/messages/com.sandpolis.plugin.desktop/#rs_capturescreenshot","text":"null Field Type Description data bytes null","title":"RS_CaptureScreenshot"},{"location":"specification/messages/com.sandpolis.plugin.device/","text":"RQ_FindSubagents null Field Type Description network string If specified, the search will be restricted to the given networks communicator CommunicatorType If specified, the search will be restricted to the given communicator types RS_FindSubagents null Field Type Description ssh_device SshDevice null snmp_device SnmpDevice null ipmi_device IpmiDevice null http_device HttpDevice null onvif_device OnvifDevice null rtsp_device RtspDevice null wol_device WolDevice null RQ_RegisterSubagent null Field Type Description ip_address string null mac_address string null gateway_uuid string The uuid of the gateway instance RS_RegisterSubagent null Field Description REGISTER_SUBAGENT_OK 0 RQ_IpmiCommand Request an IPMI command be executed Field Type Description command string The IPMI command RQ_SnmpWalk Request an SNMP walk operation be executed Field Type Description oid string The OID to retrieve RS_SnmpWalk Response containing the result of a walk operation Field Type Description data Data null RQ_SendWolPacket null Field Type Description RS_SendWolPacket null Field Description","title":"Com.sandpolis.plugin.device"},{"location":"specification/messages/com.sandpolis.plugin.device/#rq_findsubagents","text":"null Field Type Description network string If specified, the search will be restricted to the given networks communicator CommunicatorType If specified, the search will be restricted to the given communicator types","title":"RQ_FindSubagents"},{"location":"specification/messages/com.sandpolis.plugin.device/#rs_findsubagents","text":"null Field Type Description ssh_device SshDevice null snmp_device SnmpDevice null ipmi_device IpmiDevice null http_device HttpDevice null onvif_device OnvifDevice null rtsp_device RtspDevice null wol_device WolDevice null","title":"RS_FindSubagents"},{"location":"specification/messages/com.sandpolis.plugin.device/#rq_registersubagent","text":"null Field Type Description ip_address string null mac_address string null gateway_uuid string The uuid of the gateway instance","title":"RQ_RegisterSubagent"},{"location":"specification/messages/com.sandpolis.plugin.device/#rs_registersubagent","text":"null Field Description REGISTER_SUBAGENT_OK 0","title":"RS_RegisterSubagent"},{"location":"specification/messages/com.sandpolis.plugin.device/#rq_ipmicommand","text":"Request an IPMI command be executed Field Type Description command string The IPMI command","title":"RQ_IpmiCommand"},{"location":"specification/messages/com.sandpolis.plugin.device/#rq_snmpwalk","text":"Request an SNMP walk operation be executed Field Type Description oid string The OID to retrieve","title":"RQ_SnmpWalk"},{"location":"specification/messages/com.sandpolis.plugin.device/#rs_snmpwalk","text":"Response containing the result of a walk operation Field Type Description data Data null","title":"RS_SnmpWalk"},{"location":"specification/messages/com.sandpolis.plugin.device/#rq_sendwolpacket","text":"null Field Type Description","title":"RQ_SendWolPacket"},{"location":"specification/messages/com.sandpolis.plugin.device/#rs_sendwolpacket","text":"null Field Description","title":"RS_SendWolPacket"},{"location":"specification/messages/com.sandpolis.plugin.filesystem/","text":"EV_FileListing Updates to a directory listing. Field Type Description fmid int32 null path string The directory's absolute path listing FileListlet Listing updates RQ_FileListing Request a directory listing. Field Type Description path string null options FsHandleOptions null RS_FileListing Response to a directory listing request. Field Type Description path string The directory's absolute path listing FileListlet The directory listing RQ_FileInfo Request for detailed file information. Field Type Description file string An absolute path RS_FileInfo Response to a file info request. Field Type Description local_icon bytes The file's icon on the local platform path string The file's location name string The file's name ctime int64 The file's creation time mtime int64 The file's modification time atime int64 The file's access time size int64 The file's size in bytes or number of elements if directory mime string The file's MIME type RQ_FileDelete Request for one or more files to be deleted. Field Type Description target string A list of absolute paths to delete RQ_FsHandle Request to open a new filesystem handle. Field Type Description options FsHandleOptions null RS_FsHandle Response to a handle request. Field Type Description fmid int32 The filesystem handle's ID RQ_CloseFsHandle Request to close the given handle. Field Type Description fmid int32 The filesystem handle to close","title":"Com.sandpolis.plugin.filesystem"},{"location":"specification/messages/com.sandpolis.plugin.filesystem/#ev_filelisting","text":"Updates to a directory listing. Field Type Description fmid int32 null path string The directory's absolute path listing FileListlet Listing updates","title":"EV_FileListing"},{"location":"specification/messages/com.sandpolis.plugin.filesystem/#rq_filelisting","text":"Request a directory listing. Field Type Description path string null options FsHandleOptions null","title":"RQ_FileListing"},{"location":"specification/messages/com.sandpolis.plugin.filesystem/#rs_filelisting","text":"Response to a directory listing request. Field Type Description path string The directory's absolute path listing FileListlet The directory listing","title":"RS_FileListing"},{"location":"specification/messages/com.sandpolis.plugin.filesystem/#rq_fileinfo","text":"Request for detailed file information. Field Type Description file string An absolute path","title":"RQ_FileInfo"},{"location":"specification/messages/com.sandpolis.plugin.filesystem/#rs_fileinfo","text":"Response to a file info request. Field Type Description local_icon bytes The file's icon on the local platform path string The file's location name string The file's name ctime int64 The file's creation time mtime int64 The file's modification time atime int64 The file's access time size int64 The file's size in bytes or number of elements if directory mime string The file's MIME type","title":"RS_FileInfo"},{"location":"specification/messages/com.sandpolis.plugin.filesystem/#rq_filedelete","text":"Request for one or more files to be deleted. Field Type Description target string A list of absolute paths to delete","title":"RQ_FileDelete"},{"location":"specification/messages/com.sandpolis.plugin.filesystem/#rq_fshandle","text":"Request to open a new filesystem handle. Field Type Description options FsHandleOptions null","title":"RQ_FsHandle"},{"location":"specification/messages/com.sandpolis.plugin.filesystem/#rs_fshandle","text":"Response to a handle request. Field Type Description fmid int32 The filesystem handle's ID","title":"RS_FsHandle"},{"location":"specification/messages/com.sandpolis.plugin.filesystem/#rq_closefshandle","text":"Request to close the given handle. Field Type Description fmid int32 The filesystem handle to close","title":"RQ_CloseFsHandle"},{"location":"specification/messages/com.sandpolis.plugin.shell/","text":"RQ_Execute null Field Type Description type Shell null command string null RS_Execute null Field Type Description exitCode int32 null result string null RQ_ListShells null Field Type Description RS_ListShells null Field Type Description listing ShellListing null RQ_ShellStream null Field Type Description id int32 The desired stream ID type Shell The stream type environment string null rows int32 The number of rows to request cols int32 The number of columns to request EV_ShellStream null Field Type Description data bytes The I/O data rows int32 Update the number of rows cols int32 Update the number of columns","title":"Com.sandpolis.plugin.shell"},{"location":"specification/messages/com.sandpolis.plugin.shell/#rq_execute","text":"null Field Type Description type Shell null command string null","title":"RQ_Execute"},{"location":"specification/messages/com.sandpolis.plugin.shell/#rs_execute","text":"null Field Type Description exitCode int32 null result string null","title":"RS_Execute"},{"location":"specification/messages/com.sandpolis.plugin.shell/#rq_listshells","text":"null Field Type Description","title":"RQ_ListShells"},{"location":"specification/messages/com.sandpolis.plugin.shell/#rs_listshells","text":"null Field Type Description listing ShellListing null","title":"RS_ListShells"},{"location":"specification/messages/com.sandpolis.plugin.shell/#rq_shellstream","text":"null Field Type Description id int32 The desired stream ID type Shell The stream type environment string null rows int32 The number of rows to request cols int32 The number of columns to request","title":"RQ_ShellStream"},{"location":"specification/messages/com.sandpolis.plugin.shell/#ev_shellstream","text":"null Field Type Description data bytes The I/O data rows int32 Update the number of rows cols int32 Update the number of columns","title":"EV_ShellStream"},{"location":"specification/messages/com.sandpolis.plugin.snapshot/","text":"RQ_CreateSnapshot Create a new snapshot on a target agent. Sources : client Destinations : server Response : Outcome Field Type Description agent_uuid string The target agent's UUID partition_uuid string The target partition's UUID RQ_ApplySnapshot Apply an existing snapshot on a target agent. Sources : client Destinations : server Response : Outcome Field Type Description agent_uuid string The target agent's UUID partition_uuid string The target partition's UUID snapshot_uuid string The snapshot's UUID RQ_SnapshotStream Create a new snapshot stream. Sources : server, agent Destinations : server, agent Response : Outcome Field Type Description stream_id int32 The stream's ID operation string The snapshot operation type partition_uuid string The target partition uuid block_size int32 The block size in bytes EV_SnapshotDataBlock An event containing compressed snapshot data. Sources : server, agent Destinations : server, agent Field Type Description offset int64 null data bytes null EV_SnapshotHashBlock An event containing one or more contiguous block hashes. Sources : server, agent Destinations : server, agent Field Type Description offset int64 The offset of the block that the first hash corresponds hash bytes A list of consecutive block hashes","title":"Com.sandpolis.plugin.snapshot"},{"location":"specification/messages/com.sandpolis.plugin.snapshot/#rq_createsnapshot","text":"Create a new snapshot on a target agent. Sources : client Destinations : server Response : Outcome Field Type Description agent_uuid string The target agent's UUID partition_uuid string The target partition's UUID","title":"RQ_CreateSnapshot"},{"location":"specification/messages/com.sandpolis.plugin.snapshot/#rq_applysnapshot","text":"Apply an existing snapshot on a target agent. Sources : client Destinations : server Response : Outcome Field Type Description agent_uuid string The target agent's UUID partition_uuid string The target partition's UUID snapshot_uuid string The snapshot's UUID","title":"RQ_ApplySnapshot"},{"location":"specification/messages/com.sandpolis.plugin.snapshot/#rq_snapshotstream","text":"Create a new snapshot stream. Sources : server, agent Destinations : server, agent Response : Outcome Field Type Description stream_id int32 The stream's ID operation string The snapshot operation type partition_uuid string The target partition uuid block_size int32 The block size in bytes","title":"RQ_SnapshotStream"},{"location":"specification/messages/com.sandpolis.plugin.snapshot/#ev_snapshotdatablock","text":"An event containing compressed snapshot data. Sources : server, agent Destinations : server, agent Field Type Description offset int64 null data bytes null","title":"EV_SnapshotDataBlock"},{"location":"specification/messages/com.sandpolis.plugin.snapshot/#ev_snapshothashblock","text":"An event containing one or more contiguous block hashes. Sources : server, agent Destinations : server, agent Field Type Description offset int64 The offset of the block that the first hash corresponds hash bytes A list of consecutive block hashes","title":"EV_SnapshotHashBlock"},{"location":"specification/messages/com.sandpolis.plugin.update/","text":"RQ_InstallOrUpgradePackages null Field Type Description package string null RQ_RemovePackages null Field Type Description package string null RQ_RefreshPackages null Field Type Description","title":"Com.sandpolis.plugin.update"},{"location":"specification/messages/com.sandpolis.plugin.update/#rq_installorupgradepackages","text":"null Field Type Description package string null","title":"RQ_InstallOrUpgradePackages"},{"location":"specification/messages/com.sandpolis.plugin.update/#rq_removepackages","text":"null Field Type Description package string null","title":"RQ_RemovePackages"},{"location":"specification/messages/com.sandpolis.plugin.update/#rq_refreshpackages","text":"null Field Type Description","title":"RQ_RefreshPackages"},{"location":"tutorials/getting_started/","text":"Getting Started If you just want to demo Sandpolis, try connecting to the official demo server ( demo.sandpolis.com ) with the desktop client. You'll be able to look around at simulated systems, but won't be able to add your own agents. Otherwise, if you want to run your own Sandpolis network, the first thing you need is a private server instance. Deploying the Server There are several different ways to install the server. The universal installer is a user-friendly method that will work on just about every system, but a specialized distribution package or Docker container is the most convenient option for keeping the server updated. With Docker The server can be run as a Docker container with the following command: docker run \\ --name sandpolis-server \\ --restart unless-stopped \\ -p 8678:8678 \\ sandpolis/server:latest !!! note If your instance isn't starting on boot, ensure the Docker daemon is configured to start automatically: sh sudo systemctl enable docker The default admin password will be printed in the container's log which can be viewed with the following command: docker logs sandpolis-server With a distribution package Pacman (Arch Linux) Download either the stable or development package from the AUR: # Stable wget https://aur.archlinux.org/cgit/aur.git/snapshot/sandpolis.tar.gz # Development wget https://aur.archlinux.org/cgit/aur.git/snapshot/sandpolis-git.tar.gz Install with makepkg : tar xf sandpolis.tar.gz cd sandpolis makepkg -sif Start and optionally enable the server's systemd service unit: # Start the server process sudo systemctl start sandpolisd.service # Configure the server to start on boot sudo systemctl enable sandpolisd.service With the universal installer GUI Download the universal installer for your operating system. !!! note Although the server runs on any platform, it's extremely convenient to manage the server process with systemctl on Linux. Select server from the available components and choose \"install\". Installing a Client There are several official client applications that can be used to connect to a server. Not all of them have the same capabilities, so choose the variant that meets your needs best. Sandpolis Desktop Client Sandpolis for iOS The Sandpolis iOS application can be installed from the App Store and supports iPhone and iPad devices running iOS 13.0 or greater. Installing the Agent Once you're logged into a server, the last thing to do is install an agent. As with clients, there are several choices that are suitable in different environments. Standard Agent The standard agent has the most features and highest performance impact. It runs on the JVM and is multi-platform. Native Agent The native agent has fewer features and a much smaller resource requirement. It's platform-specific. Minimal Agent The minimal agent has no external dependencies and is designed to run on highly resource constrained platforms. Deployment Types In addition to different agent types, there are a few different ways each can be deployed. Standard Deploy The typical way to deploy an agent is by installing it with your platform's package manager and configuring it on first run. When prompted, enter the server's address, an optional password, and an optional time-based alphanumeric token provided in the client's user interface. !!! note This deployment method is not available for the minimal agent. Container Resident All agent types can also be deployed as Docker containers. For example: docker run \\ --name sandpolis-agent \\ --restart unless-stopped \\ -v /:/host:ro \\ sandpolis/agent This mounts the host's filesystem into the container with read-only permissions which is the most common usage. SSH Deploy The SSH deploy is most convenient if your systems are already running SSH servers. After entering an IP address, username, and password (or keyfile), an agent will be generated and transferred via SSH. Note platforms. Manual Deploy An installer executable can be generated and manually installed on systems. This approach has the disadvantage that installers are not cryptographically signed and it requires the most manual intervention. Note platforms.","title":"Getting Started"},{"location":"tutorials/getting_started/#getting-started","text":"If you just want to demo Sandpolis, try connecting to the official demo server ( demo.sandpolis.com ) with the desktop client. You'll be able to look around at simulated systems, but won't be able to add your own agents. Otherwise, if you want to run your own Sandpolis network, the first thing you need is a private server instance.","title":"Getting Started"},{"location":"tutorials/getting_started/#deploying-the-server","text":"There are several different ways to install the server. The universal installer is a user-friendly method that will work on just about every system, but a specialized distribution package or Docker container is the most convenient option for keeping the server updated.","title":"Deploying the Server"},{"location":"tutorials/getting_started/#with-docker","text":"The server can be run as a Docker container with the following command: docker run \\ --name sandpolis-server \\ --restart unless-stopped \\ -p 8678:8678 \\ sandpolis/server:latest !!! note If your instance isn't starting on boot, ensure the Docker daemon is configured to start automatically: sh sudo systemctl enable docker The default admin password will be printed in the container's log which can be viewed with the following command: docker logs sandpolis-server","title":"With Docker"},{"location":"tutorials/getting_started/#with-a-distribution-package","text":"","title":"With a distribution package"},{"location":"tutorials/getting_started/#pacman-arch-linux","text":"Download either the stable or development package from the AUR: # Stable wget https://aur.archlinux.org/cgit/aur.git/snapshot/sandpolis.tar.gz # Development wget https://aur.archlinux.org/cgit/aur.git/snapshot/sandpolis-git.tar.gz Install with makepkg : tar xf sandpolis.tar.gz cd sandpolis makepkg -sif Start and optionally enable the server's systemd service unit: # Start the server process sudo systemctl start sandpolisd.service # Configure the server to start on boot sudo systemctl enable sandpolisd.service","title":"Pacman (Arch Linux)"},{"location":"tutorials/getting_started/#with-the-universal-installer-gui","text":"Download the universal installer for your operating system. !!! note Although the server runs on any platform, it's extremely convenient to manage the server process with systemctl on Linux. Select server from the available components and choose \"install\".","title":"With the universal installer GUI"},{"location":"tutorials/getting_started/#installing-a-client","text":"There are several official client applications that can be used to connect to a server. Not all of them have the same capabilities, so choose the variant that meets your needs best.","title":"Installing a Client"},{"location":"tutorials/getting_started/#sandpolis-desktop-client","text":"","title":"Sandpolis Desktop Client"},{"location":"tutorials/getting_started/#sandpolis-for-ios","text":"The Sandpolis iOS application can be installed from the App Store and supports iPhone and iPad devices running iOS 13.0 or greater.","title":"Sandpolis for iOS"},{"location":"tutorials/getting_started/#installing-the-agent","text":"Once you're logged into a server, the last thing to do is install an agent. As with clients, there are several choices that are suitable in different environments.","title":"Installing the Agent"},{"location":"tutorials/getting_started/#standard-agent","text":"The standard agent has the most features and highest performance impact. It runs on the JVM and is multi-platform.","title":"Standard Agent"},{"location":"tutorials/getting_started/#native-agent","text":"The native agent has fewer features and a much smaller resource requirement. It's platform-specific.","title":"Native Agent"},{"location":"tutorials/getting_started/#minimal-agent","text":"The minimal agent has no external dependencies and is designed to run on highly resource constrained platforms.","title":"Minimal Agent"},{"location":"tutorials/getting_started/#deployment-types","text":"In addition to different agent types, there are a few different ways each can be deployed.","title":"Deployment Types"},{"location":"tutorials/getting_started/#standard-deploy","text":"The typical way to deploy an agent is by installing it with your platform's package manager and configuring it on first run. When prompted, enter the server's address, an optional password, and an optional time-based alphanumeric token provided in the client's user interface. !!! note This deployment method is not available for the minimal agent.","title":"Standard Deploy"},{"location":"tutorials/getting_started/#container-resident","text":"All agent types can also be deployed as Docker containers. For example: docker run \\ --name sandpolis-agent \\ --restart unless-stopped \\ -v /:/host:ro \\ sandpolis/agent This mounts the host's filesystem into the container with read-only permissions which is the most common usage.","title":"Container Resident"},{"location":"tutorials/getting_started/#ssh-deploy","text":"The SSH deploy is most convenient if your systems are already running SSH servers. After entering an IP address, username, and password (or keyfile), an agent will be generated and transferred via SSH. Note platforms.","title":"SSH Deploy"},{"location":"tutorials/getting_started/#manual-deploy","text":"An installer executable can be generated and manually installed on systems. This approach has the disadvantage that installers are not cryptographically signed and it requires the most manual intervention. Note platforms.","title":"Manual Deploy"},{"location":"tutorials/client/gui/","text":"Sandpolis Desktop Interface The desktop application is a fully-featured GUI that runs on Windows, Linux, and macOS.","title":"Using the desktop client"},{"location":"tutorials/client/gui/#sandpolis-desktop-interface","text":"The desktop application is a fully-featured GUI that runs on Windows, Linux, and macOS.","title":"Sandpolis Desktop Interface"},{"location":"tutorials/client/ios/","text":"","title":"Ios"},{"location":"tutorials/client/terminal/","text":"Terminal Interface Sandpolis comes with a minimalist text interface compatible with most ANSI-compliant terminals. It doesn't have as many features as the GUI, but it's fast and easy to use. As an added benefit, you'll look like a l33t h@ck3r when using it. Installation Starting a Listener Generating an Installer Address Port Timeout Path","title":"Using the terminal client"},{"location":"tutorials/client/terminal/#terminal-interface","text":"Sandpolis comes with a minimalist text interface compatible with most ANSI-compliant terminals. It doesn't have as many features as the GUI, but it's fast and easy to use. As an added benefit, you'll look like a l33t h@ck3r when using it.","title":"Terminal Interface"},{"location":"tutorials/client/terminal/#installation","text":"","title":"Installation"},{"location":"tutorials/client/terminal/#starting-a-listener","text":"","title":"Starting a Listener"},{"location":"tutorials/client/terminal/#generating-an-installer","text":"","title":"Generating an Installer"},{"location":"tutorials/client/terminal/#address","text":"","title":"Address"},{"location":"tutorials/client/terminal/#port","text":"","title":"Port"},{"location":"tutorials/client/terminal/#timeout","text":"","title":"Timeout"},{"location":"tutorials/client/terminal/#path","text":"","title":"Path"}]}